[{"path":[]},{"path":"/TODO.html","id":"prediction-function-without-data-update","dir":"","previous_headings":"","what":"Prediction function without data update","title":"add_parameters","text":"moment diff eqs simulation (stochastic!)","code":""},{"path":[]},{"path":"/TODO.html","id":null,"dir":"","previous_headings":"","what":"add_parameters","title":"add_parameters","text":"doesnt remove fixed parameter recalling add_parameters without NA’s. need update ","code":""},{"path":[]},{"path":"/articles/SimpleModel.html","id":"r-markdown","dir":"Articles","previous_headings":"","what":"R Markdown","title":"Simple Model","text":"R Markdown document. Markdown simple formatting syntax authoring HTML, PDF, MS Word documents. details using R Markdown see http://rmarkdown.rstudio.com. click Knit button document generated includes content well output embedded R code chunks within document. can embed R code chunk like :","code":"summary(cars) ##      speed           dist        ##  Min.   : 4.0   Min.   :  2.00   ##  1st Qu.:12.0   1st Qu.: 26.00   ##  Median :15.0   Median : 36.00   ##  Mean   :15.4   Mean   : 42.98   ##  3rd Qu.:19.0   3rd Qu.: 56.00   ##  Max.   :25.0   Max.   :120.00"},{"path":"/articles/SimpleModel.html","id":"including-plots","dir":"Articles","previous_headings":"","what":"Including Plots","title":"Simple Model","text":"can also embed plots, example:  Note echo = FALSE parameter added code chunk prevent printing R code generated plot.","code":""},{"path":"/articles/ctsmrTMB.html","id":"r-markdown","dir":"Articles","previous_headings":"","what":"R Markdown","title":"Getting Started","text":"R Markdown document. Markdown simple formatting syntax authoring HTML, PDF, MS Word documents. details using R Markdown see http://rmarkdown.rstudio.com. click Knit button document generated includes content well output embedded R code chunks within document. can embed R code chunk like :","code":"summary(cars) ##      speed           dist        ##  Min.   : 4.0   Min.   :  2.00   ##  1st Qu.:12.0   1st Qu.: 26.00   ##  Median :15.0   Median : 36.00   ##  Mean   :15.4   Mean   : 42.98   ##  3rd Qu.:19.0   3rd Qu.: 56.00   ##  Max.   :25.0   Max.   :120.00"},{"path":"/articles/ctsmrTMB.html","id":"including-plots","dir":"Articles","previous_headings":"","what":"Including Plots","title":"Getting Started","text":"can also embed plots, example:  Note echo = FALSE parameter added code chunk prevent printing R code generated plot.","code":""},{"path":"/articles/gettingStarted.html","id":"r-markdown","dir":"Articles","previous_headings":"","what":"R Markdown","title":"Getting Started","text":"R Markdown document. Markdown simple formatting syntax authoring HTML, PDF, MS Word documents. details using R Markdown see http://rmarkdown.rstudio.com. click Knit button document generated includes content well output embedded R code chunks within document. can embed R code chunk like :","code":"summary(cars) ##      speed           dist        ##  Min.   : 4.0   Min.   :  2.00   ##  1st Qu.:12.0   1st Qu.: 26.00   ##  Median :15.0   Median : 36.00   ##  Mean   :15.4   Mean   : 42.98   ##  3rd Qu.:19.0   3rd Qu.: 56.00   ##  Max.   :25.0   Max.   :120.00"},{"path":"/articles/gettingStarted.html","id":"including-plots","dir":"Articles","previous_headings":"","what":"Including Plots","title":"Getting Started","text":"can also embed plots, example:  Note echo = FALSE parameter added code chunk prevent printing R code generated plot.","code":""},{"path":"/articles/simple_model.html","id":"construct_nll","dir":"Articles","previous_headings":"","what":"construct_nll","title":"Simple Model","text":"document show use method class object construct extract objective function handles. gives user direct access objective function, gradient hessian (latter available model contain random effects parameters.). useful instance user preferred optimizer, wish customise objective function. first generate generate random walk data. returns gives access object created calling ’s} function. R Markdown document. Markdown simple formatting syntax authoring HTML, PDF, MS Word documents. details using R Markdown see http://rmarkdown.rstudio.com. click Knit button document generated includes content well output embedded R code chunks within document. can embed R code chunk like :","code":"tvec = seq(0,100,by=1) df = cbind( tvec, rnorm(length(tvec),mean=0,sd=diff(tvec)) ) summary(cars) ##      speed           dist        ##  Min.   : 4.0   Min.   :  2.00   ##  1st Qu.:12.0   1st Qu.: 26.00   ##  Median :15.0   Median : 36.00   ##  Mean   :15.4   Mean   : 42.98   ##  3rd Qu.:19.0   3rd Qu.: 56.00   ##  Max.   :25.0   Max.   :120.00"},{"path":"/articles/simple_model.html","id":"including-plots","dir":"Articles","previous_headings":"","what":"Including Plots","title":"Simple Model","text":"can also embed plots, example:  Note echo = FALSE parameter added code chunk prevent printing R code generated plot.","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Phillip Vetter. Author, maintainer. Jan Møller. Contributor. Uffe Thygesen. Contributor. Peder Bacher. Contributor. Tobias Ritschel. Contributor.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Vetter P (2023). ctsmrTMB: Continuous Time Stochastic Modelling Template Model Builder. https://phillipbvetter.github.io/ctsmrTMB, https://github.com/phillipbvetter/ctsmrTMB.","code":"@Manual{,   title = {ctsmrTMB: Continuous Time Stochastic Modelling with Template Model Builder},   author = {Phillip Vetter},   year = {2023},   note = {https://phillipbvetter.github.io/ctsmrTMB, https://github.com/phillipbvetter/ctsmrTMB}, }"},{"path":"/index.html","id":"continuous-time-stochastic-modelling-for-r-using-template-model-builder-ctsmrtmb","dir":"","previous_headings":"","what":"Continuous Time Stochastic Modelling with Template Model Builder","title":"Continuous Time Stochastic Modelling with Template Model Builder","text":"ctsmrTMB R package parameter estimation, state filtration forecasting stochastic state space models, heavily inspired Continuous Time Stochastic Modelling. package user-friendly wrapper Template Model Builder frees user writing required C++ file containing (negative log) likelihood function . Instead, C++ script generated automatically based model specified user using provided R6 ctsmrTMB class object. package implements following methods TMB-style approach latent states considered random effects (see e.g. example) (Continous-Discrete) Extended Kalman Filter (Continous-Discrete) Unscented Kalman Filter main advantage kalman filter implementations large increase computational speed (x20), access fixed effects hessian. cases TMB just acts convenient automatic-differentiator. distinct advantage TMB-style implementation allows non-Gaussian observation noise, functionality yet implemented package.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Continuous Time Stochastic Modelling with Template Model Builder","text":"","code":"remotes::install_github(repo=\"phillipbvetter/ctsmrTMB\", dependencies=TRUE)"},{"path":"/index.html","id":"example-usage","dir":"","previous_headings":"","what":"Example Usage","title":"Continuous Time Stochastic Modelling with Template Model Builder","text":"","code":"library(ctsmrTMB) library(ggplot2)   ############################################################ # Data simulation ############################################################  # Simulate data using Euler Maruyama set.seed(10) pars = c(theta=10, mu=1, sigma_x=1, sigma_y=1e-2) #  dt.sim = 1e-3 t.sim = seq(0,1,by=dt.sim) dw = rnorm(length(t.sim)-1,sd=sqrt(dt.sim)) x = 3 for(i in 1:N.sim) {   x[i+1] = x[i] + pars[1]*(pars[2]-x[i])*dt.sim + pars[3]*dw[i] }  # Extract observations and add noise dt.obs = 1e-2 t.obs = seq(0,1,by=dt.obs) y = x[t.sim %in% t.obs] + pars[4] * rnorm(length(t.obs))  # Create data .data = data.frame(   t = t.obs,   y = y )  ############################################################ # Model creation and estimation ############################################################  # Create model object obj = ctsmrTMB$new()  # Set name of model (and the created .cpp file) obj$set_modelname(\"ornstein_uhlenbeck\")  # Set location where generated C++ files are stored obj$set_cppfile_directory(\"cppfiles\")  # Add system equations obj$add_systems(   dx ~ theta * (mu-x) * dt + sigma_x*dw )  # Add observation equations obj$add_observations(   y ~ x )  # Set observation equation variances obj$add_observation_variances(   y ~ sigma_y^2 )  # Specify algebraic relations obj$add_algebraics(   theta ~ exp(logtheta),   sigma_x ~ exp(logsigma_x),   sigma_y ~ exp(logsigma_y) )  # Perform a lamperti transformation (for state dependent diffusion) # This would be useful if we had sigma_x * x * dw in the diffusion term. # In this case the transformation z = log(x) would leave the transformed # process with state independent diffusion. # obj$set_lamperti(\"log\")  # Specify inputs (if there were any) # obj$add_inputs(input1, input2)  # Specify parameter initial values and lower/upper bounds in estimation obj$add_parameters(   logtheta = log(c(init = 1, lower=1e-5, upper=50)),   mu = c(init=1.5, lower=0, upper=5),   logsigma_x = log(c(init= 1e-1, lower=1e-10, upper=10)),   logsigma_y = log(c(init=1e-1, lower=1e-10, upper=10)) )  # Set initial state mean and covariance obj$set_initial_state(x[1], 1e-1*diag(1))  # If you want the objective function handlers (function, gradient and maybe hessian) # and choose you own optimizer then extract these by nll <- obj$construct_nll(.data, method=\"ekf\") # then nll$fn(), nll$gr() and nll$he() evaluates the objective function, its gradient and hessian respectively. # the functions takes values of the fixed effects as argument (initial parameter values are found in nll$par)  # Carry out estimation using extended kalman filter method with in-built nlminb optimizer fit <- obj$estimate(.data, method=\"ekf\")  # See the full list of options and explanations for estimate in ?ctsmrTMB  # Default options in estimate are fit <- obj$estimate(   data = .data,   use.hessian = FALSE,   ode.timestep = NULL,   silence = TRUE,   compile = FALSE,   method = \"ekf\",    loss = \"quadratic\",    loss_c = 3,   control = list(trace=1)    )  # Check parameter estimates against truth pars2real = function(x) c(exp(x[1]),x[2],exp(x[3]),exp(x[4])) cbind( pars2real(fit$par.fixed), pars )  # plot one-step predictions, simulated states and observations t.est = fit$states$mean$prior$t x.mean = fit$states$mean$prior$x x.sd = fit$states$sd$prior$x ggplot() +   geom_ribbon(aes(x=t.est, ymin=x.mean-2*x.sd, ymax=x.mean+2*x.sd),fill=\"grey\", alpha=0.9) +   geom_line(aes(x=t.sim,y=x)) +    geom_line(aes(x=t.est, x.mean),col=\"blue\") +   geom_point(aes(x=t.obs,y=y),col=\"red\",size=2) +   theme_minimal()   # Check one-step-ahead residuals plot(fit, use.ggplot=T)  # Predict to obtain k-step-ahead predictions to see model forecasting ability # The predict function will use the optimized parameters if obj$estimate was # called before calling predict, otherwise it will use the initial values # specified when calling add_parameters pred = obj$predict(data=.data, n.ahead=10)"},{"path":"/reference/ctsmrTMB.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructor for R6 ctsmrTMB class — ctsmrTMB","title":"Constructor for R6 ctsmrTMB class — ctsmrTMB","text":"Call ctsmrTMB$new() construct new instance class object specifying new stochastic state space model.","code":""},{"path":"/reference/ctsmrTMB.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Constructor for R6 ctsmrTMB class — ctsmrTMB","text":"model object class 'ctsmrTMB'","code":""},{"path":[]},{"path":"/reference/ctsmrTMB.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Constructor for R6 ctsmrTMB class — ctsmrTMB","text":"ctsmrTMB$new() ctsmrTMB$add_systems() ctsmrTMB$add_observations() ctsmrTMB$add_observation_variances() ctsmrTMB$add_inputs() ctsmrTMB$add_parameters() ctsmrTMB$add_algebraics() ctsmrTMB$add_constants() ctsmrTMB$set_initial_state() ctsmrTMB$set_lamperti() ctsmrTMB$set_modelname() ctsmrTMB$set_cppfile_directory() ctsmrTMB$set_map() ctsmrTMB$get_parameters() ctsmrTMB$construct_nll() ctsmrTMB$estimate() ctsmrTMB$predict() ctsmrTMB$print() ctsmrTMB$summary() ctsmrTMB$plot() ctsmrTMB$clone()","code":""},{"path":"/reference/ctsmrTMB.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Constructor for R6 ctsmrTMB class — ctsmrTMB","text":"Construct new ctsmrTMB model object","code":""},{"path":"/reference/ctsmrTMB.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructor for R6 ctsmrTMB class — ctsmrTMB","text":"","code":"ctsmrTMB$new()"},{"path":"/reference/ctsmrTMB.html","id":"method-add-systems-","dir":"Reference","previous_headings":"","what":"Method add_systems()","title":"Constructor for R6 ctsmrTMB class — ctsmrTMB","text":"Define add multiple stochastic differential equation governing process individual state variables form d<state> ~ f(t,<states>,<inputs>) * dt + g1(t,<states>,<inputs>) * dw1                                           + g2(t,<states>,<inputs>) * dw2                                             + ... f drift, g1, g2, ... diffusions, differential brownian motions dw1, dw2, ...","code":""},{"path":"/reference/ctsmrTMB.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructor for R6 ctsmrTMB class — ctsmrTMB","text":"","code":"ctsmrTMB$add_systems(form, ...)"},{"path":"/reference/ctsmrTMB.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructor for R6 ctsmrTMB class — ctsmrTMB","text":"form formula specifying stochastic differential equation added system. ... additional formulas similar form specifying multiple equations .","code":""},{"path":"/reference/ctsmrTMB.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Constructor for R6 ctsmrTMB class — ctsmrTMB","text":"","code":"# Specify Ornstein-Uhlenbeck Process add_systems(dX ~ theta * (mu - X + u) * dt + sigma * dw)  # Specify Lokta-Volterra System of Equations add_systems( dN ~ ( r * N * (1-N/K) - c*N*P/(N+Nbar) ) * dt + sigmaN * N * dw1,              dP ~ ( eps*c*N*P/(N+Nbar) - mu * P ) * dt + sigmaP * P * dw2 )"},{"path":"/reference/ctsmrTMB.html","id":"method-add-observations-","dir":"Reference","previous_headings":"","what":"Method add_observations()","title":"Constructor for R6 ctsmrTMB class — ctsmrTMB","text":"Define add relationship observed variable system states. observation equation takes form <observation> ~ h(t,<states>,<inputs>) + e) h observation function, e normally distributed noise zero mean variance specified. observation variable present data provided calling estimate(.data) parameter estimation.","code":""},{"path":"/reference/ctsmrTMB.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructor for R6 ctsmrTMB class — ctsmrTMB","text":"","code":"ctsmrTMB$add_observations(form, ...)"},{"path":"/reference/ctsmrTMB.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructor for R6 ctsmrTMB class — ctsmrTMB","text":"form formula class specifying obsevation equation added system. ... additional formulas identical form specify multiple observation equations time.","code":""},{"path":"/reference/ctsmrTMB.html","id":"examples-1","dir":"Reference","previous_headings":"","what":"Examples","title":"Constructor for R6 ctsmrTMB class — ctsmrTMB","text":"","code":"#Specify observation directly as a latent state add_observations(y ~ x)  Specify observation as the sum of exponentials of two latent states add_observations(y ~ exp(x1) + exp(x2))"},{"path":"/reference/ctsmrTMB.html","id":"method-add-observation-variances-","dir":"Reference","previous_headings":"","what":"Method add_observation_variances()","title":"Constructor for R6 ctsmrTMB class — ctsmrTMB","text":"Specify variance observation equation. defined observation variable y e.g. add_observations(y ~  h(t,<states>,<inputs>) pertubed Gaussian noise zero mean variance -specified using add_observation_variances(y ~ p(t,<states>,<inputs>). can instance declare add_observation_variances(y ~ sigma_x^2 sigma_x fixed effect parameter declared add_parameters.","code":""},{"path":"/reference/ctsmrTMB.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructor for R6 ctsmrTMB class — ctsmrTMB","text":"","code":"ctsmrTMB$add_observation_variances(form, ...)"},{"path":"/reference/ctsmrTMB.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructor for R6 ctsmrTMB class — ctsmrTMB","text":"form formula class specifying obsevation equation added system. ... additional formulas identical form specify multiple observation equations time.","code":""},{"path":"/reference/ctsmrTMB.html","id":"method-add-inputs-","dir":"Reference","previous_headings":"","what":"Method add_inputs()","title":"Constructor for R6 ctsmrTMB class — ctsmrTMB","text":"Declare variables data inputs Declare whether variable contained system, observation observation variance equations input variable. e.g. system equation contains input variable u declared using add_inputs(u). input data u must contained data.frame data calling estimate(data) parameter estimation.","code":""},{"path":"/reference/ctsmrTMB.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructor for R6 ctsmrTMB class — ctsmrTMB","text":"","code":"ctsmrTMB$add_inputs(...)"},{"path":"/reference/ctsmrTMB.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructor for R6 ctsmrTMB class — ctsmrTMB","text":"... additional formulas identical form specify multiple observation equations time.","code":""},{"path":"/reference/ctsmrTMB.html","id":"method-add-parameters-","dir":"Reference","previous_headings":"","what":"Method add_parameters()","title":"Constructor for R6 ctsmrTMB class — ctsmrTMB","text":"Declare variables fixed effects specify initial value, lower upper bound used calling maximum likelihood optimization. two ways declare parameters. can declare parameters using formulas .e. add_parameters( theta ~ c(1,0,10), mu ~ c(0,-10,10) ), values initial, lower upper bound respectively. Alternatively can provide 3-column matrix rows corresponds different parameters, parameter names provided rownames matrix.","code":""},{"path":"/reference/ctsmrTMB.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructor for R6 ctsmrTMB class — ctsmrTMB","text":"","code":"ctsmrTMB$add_parameters(...)"},{"path":"/reference/ctsmrTMB.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructor for R6 ctsmrTMB class — ctsmrTMB","text":"... formula whose left-hand side parameter name, right hand side vector length 3 inital value, lower upper bound respectively. can provide multiple parameters seperating formulas comma. parameter.matrix matrix 3 columns rows correspond variables. variable names must provided rownames matrix. columns initial value, lower upper bound respectively.","code":""},{"path":"/reference/ctsmrTMB.html","id":"method-add-algebraics-","dir":"Reference","previous_headings":"","what":"Method add_algebraics()","title":"Constructor for R6 ctsmrTMB class — ctsmrTMB","text":"Add algebraic relations. Algebraic relations convenient way transform parameters equations. Ornstein-Uhlenbeck process rate parameter theta always positive, estimation log-domain good idea. Instead writing exp(theta) directly system equation one can transform log domain using algebraic relation add_algebraics(theta ~ exp(logtheta)). instances theta replaced exp(logtheta) compiling C++ function. Note must provide values logtheta now instead theta declaring parameters add_parameters","code":""},{"path":"/reference/ctsmrTMB.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructor for R6 ctsmrTMB class — ctsmrTMB","text":"","code":"ctsmrTMB$add_algebraics(form, ...)"},{"path":"/reference/ctsmrTMB.html","id":"arguments-5","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructor for R6 ctsmrTMB class — ctsmrTMB","text":"form formula specifying stochastic differential equation(s) added system. ... additional formulas similar form specifying multiple equations .","code":""},{"path":"/reference/ctsmrTMB.html","id":"method-add-constants-","dir":"Reference","previous_headings":"","what":"Method add_constants()","title":"Constructor for R6 ctsmrTMB class — ctsmrTMB","text":"Declare variables scalar constants.","code":""},{"path":"/reference/ctsmrTMB.html","id":"usage-7","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructor for R6 ctsmrTMB class — ctsmrTMB","text":"","code":"ctsmrTMB$add_constants(form, ...)"},{"path":"/reference/ctsmrTMB.html","id":"arguments-6","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructor for R6 ctsmrTMB class — ctsmrTMB","text":"form formula whose left-hand side constant variable name, right-hand side numeric value. ... additional formulas similar form specifying multiple constants .","code":""},{"path":"/reference/ctsmrTMB.html","id":"method-set-initial-state-","dir":"Reference","previous_headings":"","what":"Method set_initial_state()","title":"Constructor for R6 ctsmrTMB class — ctsmrTMB","text":"Declare initial state values .e. mean covariance system states.","code":""},{"path":"/reference/ctsmrTMB.html","id":"usage-8","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructor for R6 ctsmrTMB class — ctsmrTMB","text":"","code":"ctsmrTMB$set_initial_state(mean, cov)"},{"path":"/reference/ctsmrTMB.html","id":"arguments-7","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructor for R6 ctsmrTMB class — ctsmrTMB","text":"mean numeric vector size equal n (number system states) cov matrix (symmetric positive semi-definite) dimensions n^2.","code":""},{"path":"/reference/ctsmrTMB.html","id":"method-set-lamperti-","dir":"Reference","previous_headings":"","what":"Method set_lamperti()","title":"Constructor for R6 ctsmrTMB class — ctsmrTMB","text":"Set Lamperti Transformation provided system equations state dependent diffusion available ways advantageous perform transformation remove state dependence. comes cost complicated drift function. following types state-dependence currently supported transformation desired choose 'identity' (default). diffusion term proportional x * dw, log-transform available diffusion term proportional x * (1-x) * dw, logit-transform available diffusion term proportional sqrt(x * (1-x)) * dw, sqrt-logit-transform available diffusion term proportional x * (1-x^) * dw, >0 power-logit transform available","code":""},{"path":"/reference/ctsmrTMB.html","id":"usage-9","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructor for R6 ctsmrTMB class — ctsmrTMB","text":"","code":"ctsmrTMB$set_lamperti(transform, states = NULL)"},{"path":"/reference/ctsmrTMB.html","id":"arguments-8","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructor for R6 ctsmrTMB class — ctsmrTMB","text":"transform character vector - one either \"identity, \"log\", \"logit\", \"sqrt-logit\", \"power-logit\" states vector state names chosen transformation desired. default (NULL) apply transformation state equations.","code":""},{"path":"/reference/ctsmrTMB.html","id":"method-set-modelname-","dir":"Reference","previous_headings":"","what":"Method set_modelname()","title":"Constructor for R6 ctsmrTMB class — ctsmrTMB","text":"Set modelname used create C++ file TMB calling TMB::MakeADFun (negative log) likelihood function created directory specified set_cppfile_directory method name <modelname>.cpp","code":""},{"path":"/reference/ctsmrTMB.html","id":"usage-10","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructor for R6 ctsmrTMB class — ctsmrTMB","text":"","code":"ctsmrTMB$set_modelname(name)"},{"path":"/reference/ctsmrTMB.html","id":"arguments-9","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructor for R6 ctsmrTMB class — ctsmrTMB","text":"name string defining model name.","code":""},{"path":"/reference/ctsmrTMB.html","id":"method-set-cppfile-directory-","dir":"Reference","previous_headings":"","what":"Method set_cppfile_directory()","title":"Constructor for R6 ctsmrTMB class — ctsmrTMB","text":"Set path directory constructed C++ file created.","code":""},{"path":"/reference/ctsmrTMB.html","id":"usage-11","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructor for R6 ctsmrTMB class — ctsmrTMB","text":"","code":"ctsmrTMB$set_cppfile_directory(directory)"},{"path":"/reference/ctsmrTMB.html","id":"arguments-10","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructor for R6 ctsmrTMB class — ctsmrTMB","text":"directory string specifying local path / directory","code":""},{"path":"/reference/ctsmrTMB.html","id":"method-set-map-","dir":"Reference","previous_headings":"","what":"Method set_map()","title":"Constructor for R6 ctsmrTMB class — ctsmrTMB","text":"Enable maximum posterior (MAP) estimation. Adds maximum posterior contribution (negative log) likelihood function evaluating fixed effects parameters multivariate Gaussian mean covariance provided.","code":""},{"path":"/reference/ctsmrTMB.html","id":"usage-12","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructor for R6 ctsmrTMB class — ctsmrTMB","text":"","code":"ctsmrTMB$set_map(mean, cov)"},{"path":"/reference/ctsmrTMB.html","id":"arguments-11","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructor for R6 ctsmrTMB class — ctsmrTMB","text":"mean mean vector Gaussian prior parameter distribution cov covariance matrix Gaussian prior parameter distribution","code":""},{"path":"/reference/ctsmrTMB.html","id":"method-get-parameters-","dir":"Reference","previous_headings":"","what":"Method get_parameters()","title":"Constructor for R6 ctsmrTMB class — ctsmrTMB","text":"Get initial (estimated) parameters.","code":""},{"path":"/reference/ctsmrTMB.html","id":"usage-13","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructor for R6 ctsmrTMB class — ctsmrTMB","text":"","code":"ctsmrTMB$get_parameters()"},{"path":"/reference/ctsmrTMB.html","id":"method-construct-nll-","dir":"Reference","previous_headings":"","what":"Method construct_nll()","title":"Constructor for R6 ctsmrTMB class — ctsmrTMB","text":"Construct extract function handlers negative log likelihood function. handlers TMB's MakeADFun constructed returned. enables user e.g. determine optimization algorithm use estimation.","code":""},{"path":"/reference/ctsmrTMB.html","id":"usage-14","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructor for R6 ctsmrTMB class — ctsmrTMB","text":"","code":"ctsmrTMB$construct_nll(   data,   ode.timestep = NULL,   silence = FALSE,   compile = FALSE,   method = \"ekf\",   loss = \"quadratic\",   loss_c = 3 )"},{"path":"/reference/ctsmrTMB.html","id":"arguments-12","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructor for R6 ctsmrTMB class — ctsmrTMB","text":"data data.frame containing time-vector 't', observations inputs. observations can take NA-values. ode.timestep numeric value. Sets time step-size numerical filtering schemes. defined step-size used calculate number steps observation time-points defined provided data. calculated number steps larger N.01 N integer, time-step reduced exactly N+1 steps taken observations step-size used two following ways depending chosen method: Kalman filters: time-step used step-size numerical Forward-Euler scheme compute prior state mean covariance estimate final time solution first second order moment differential equations. TMB method: time-step used step-size Euler-Maruyama scheme simulating sample path stochastic differential equation, serves link together latent (random effects) states. silence boolean value. Sets tracing information TMB::MakeADFun argument silent disables outputs optimization algoritm runtime. compile boolean value. default (FALSE) compile C++ objective function assume already compiled corresponds specified model object. user's responsibility ensure correspondence specified model precompiled C++ object. precompiled C++ object found specified directory .e. <cppfile_directory>/<modelname>/(dll/) compile flag set TRUE. user makes changes system equations, observation equations, observation variances, algebraic relations lamperi transformations C++ object recompiled. method character vector - one either \"ekf\", \"ukf\" \"tmb\". Sets estimation method. package three available methods implemented: natural TMB-style formulation latent states considered random effects integrated using Laplace approximation. method yields gradient (negative log) likelihood function respect fixed effects optimization. method slower although probably precision advantages, allows non-Gaussian observation noise (yet implemented). One-step / K-step residuals yet available package. (Continous-Discrete) Extended Kalman Filter system dynamics linearized handle potential non-linearities. computationally fastest method. (Continous-Discrete) Unscented Kalman Filter. higher order non-linear Kalman Filter improves mean covariance estimates system display high nonlinearity, circumvents necessity compute jacobian drift observation functions. package features currently available kalman filters, TMB limited parameter estimation. particular, straight-forward obtain k-step-ahead predictions methods (use predict S3 method), stochastic simulation also available cases long prediction horizons sought, normality assumption inaccurate. loss character vector. Sets loss function type (implemented kalman filter methods). loss function per default quadratic one-step residauls natural Gaussian (negative log) likelihood evaluated, tails distribution considered small .e. outliers weighted much, one can choose loss functions accounts . three available types available: Quadratic loss (quadratic). Quadratic-Linear (huber) Quadratic-Constant (tukey) cutoff Huber Tukey loss functions determined provided cutoff parameter loss_c. implementations losses approximations (pseudo-huber sigmoid approxmation respectively) smooth derivatives. loss_c cutoff value huber tukey loss functions. Defaults c=3","code":""},{"path":"/reference/ctsmrTMB.html","id":"method-estimate-","dir":"Reference","previous_headings":"","what":"Method estimate()","title":"Constructor for R6 ctsmrTMB class — ctsmrTMB","text":"Estimate fixed effects parameters specified model.","code":""},{"path":"/reference/ctsmrTMB.html","id":"usage-15","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructor for R6 ctsmrTMB class — ctsmrTMB","text":"","code":"ctsmrTMB$estimate(   data,   use.hessian = FALSE,   ode.timestep = NULL,   silence = TRUE,   compile = FALSE,   method = \"ekf\",   loss = \"quadratic\",   loss_c = 3,   control = list(trace = 1) )"},{"path":"/reference/ctsmrTMB.html","id":"arguments-13","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructor for R6 ctsmrTMB class — ctsmrTMB","text":"data data.frame containing time-vector 't', observations inputs. observations can take NA-values. use.hessian boolean value. default (TRUE) causes optimization algorithm stats::nlminb use fixed effects hessian (negative log) likelihood performing optimization. feature available kalman filter methods without random effects. ode.timestep numeric value. Sets time step-size numerical filtering schemes. defined step-size used calculate number steps observation time-points defined provided data. calculated number steps larger N.01 N integer, time-step reduced exactly N+1 steps taken observations step-size used two following ways depending chosen method: Kalman filters: time-step used step-size numerical Forward-Euler scheme compute prior state mean covariance estimate final time solution first second order moment differential equations. TMB method: time-step used step-size Euler-Maruyama scheme simulating sample path stochastic differential equation, serves link together latent (random effects) states. silence boolean value. Sets tracing information TMB::MakeADFun argument silent disables outputs optimization algoritm runtime. compile boolean value. default (FALSE) compile C++ objective function assume already compiled corresponds specified model object. user's responsibility ensure correspondence specified model precompiled C++ object. precompiled C++ object found specified directory .e. <cppfile_directory>/<modelname>/(dll/) compile flag set TRUE. user makes changes system equations, observation equations, observation variances, algebraic relations lamperi transformations C++ object recompiled. method character vector - one either \"ekf\", \"ukf\" \"tmb\". Sets estimation method. package three available methods implemented: natural TMB-style formulation latent states considered random effects integrated using Laplace approximation. method yields gradient (negative log) likelihood function respect fixed effects optimization. method slower although probably precision advantages, allows non-Gaussian observation noise (yet implemented). One-step / K-step residuals yet available package. (Continous-Discrete) Extended Kalman Filter system dynamics linearized handle potential non-linearities. computationally fastest method. (Continous-Discrete) Unscented Kalman Filter. higher order non-linear Kalman Filter improves mean covariance estimates system display high nonlinearity, circumvents necessity compute jacobian drift observation functions. package features currently available kalman filters, TMB limited parameter estimation. particular, straight-forward obtain k-step-ahead predictions methods (use predict S3 method), stochastic simulation also available cases long prediction horizons sought, normality assumption inaccurate. loss character vector. Sets loss function type (implemented kalman filter methods). loss function per default quadratic one-step residauls natural Gaussian (negative log) likelihood evaluated, tails distribution considered small .e. outliers weighted much, one can choose loss functions accounts . three available types available: Quadratic loss (quadratic). Quadratic-Linear (huber) Quadratic-Constant (tukey) cutoff Huber Tukey loss functions determined provided cutoff parameter loss_c. implementations losses approximations (pseudo-huber sigmoid approxmation respectively) smooth derivatives. loss_c cutoff value huber tukey loss functions. Defaults c=3 control list control parameters parsed nlminb control argument. See ?stats::nlminb information","code":""},{"path":"/reference/ctsmrTMB.html","id":"method-predict-","dir":"Reference","previous_headings":"","what":"Method predict()","title":"Constructor for R6 ctsmrTMB class — ctsmrTMB","text":"Perform prediction/filtration obtain state mean covariance estimates.","code":""},{"path":"/reference/ctsmrTMB.html","id":"usage-16","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructor for R6 ctsmrTMB class — ctsmrTMB","text":"","code":"ctsmrTMB$predict(   data = NULL,   pars = NULL,   n.ahead = 1,   return.n.ahead = NULL,   ode.timestep = NULL,   compile = FALSE,   method = \"ekf\",   x0 = NULL,   p0 = NULL,   return.covariance = TRUE )"},{"path":"/reference/ctsmrTMB.html","id":"arguments-14","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructor for R6 ctsmrTMB class — ctsmrTMB","text":"data data.frame containing time-vector 't', observations inputs. observations can take NA-values. pars fixed parameter vector parsed objective function prediction/filtration. default parameter values used initial parameters provided add_parameters, unless estimate function run, default values found optimum. n.ahead integer specifying desired number time-steps (determined provided data time-vector) predictions made (integrating moment ODEs forward time without data updates). return.n.ahead numeric vector integers specifying n.ahead predictions returned. ode.timestep numeric value. Sets time step-size numerical filtering schemes. defined step-size used calculate number steps observation time-points defined provided data. calculated number steps larger N.01 N integer, time-step reduced exactly N+1 steps taken observations step-size used two following ways depending chosen method: Kalman filters: time-step used step-size numerical Forward-Euler scheme compute prior state mean covariance estimate final time solution first second order moment differential equations. TMB method: time-step used step-size Euler-Maruyama scheme simulating sample path stochastic differential equation, serves link together latent (random effects) states. compile boolean value. default (FALSE) compile C++ objective function assume already compiled corresponds specified model object. user's responsibility ensure correspondence specified model precompiled C++ object. precompiled C++ object found specified directory .e. <cppfile_directory>/<modelname>/(dll/) compile flag set TRUE. user makes changes system equations, observation equations, observation variances, algebraic relations lamperi transformations C++ object recompiled. method character vector - one either \"ekf\", \"ukf\" \"tmb\". Sets estimation method. package three available methods implemented: EKF IMPLEMENTED CURRENTLY!! natural TMB-style formulation latent states considered random effects integrated using Laplace approximation. method yields gradient (negative log) likelihood function respect fixed effects optimization. method slower although probably precision advantages, allows non-Gaussian observation noise (yet implemented). One-step / K-step residuals yet available package. (Continous-Discrete) Extended Kalman Filter system dynamics linearized handle potential non-linearities. computationally fastest method. (Continous-Discrete) Unscented Kalman Filter. higher order non-linear Kalman Filter improves mean covariance estimates system display high nonlinearity, circumvents necessity compute jacobian drift observation functions. package features currently available kalman filters, TMB limited parameter estimation. particular, straight-forward obtain k-step-ahead predictions methods (use predict S3 method), stochastic simulation also available cases long prediction horizons sought, normality assumption inaccurate. x0 numeric vector containing initial expected state values p0 numeric matrix contianing initial state covariances return.covariance booelan value indicate whether covariance (instead correlation) returned.","code":""},{"path":"/reference/ctsmrTMB.html","id":"method-print-","dir":"Reference","previous_headings":"","what":"Method print()","title":"Constructor for R6 ctsmrTMB class — ctsmrTMB","text":"Function print model object","code":""},{"path":"/reference/ctsmrTMB.html","id":"usage-17","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructor for R6 ctsmrTMB class — ctsmrTMB","text":"","code":"ctsmrTMB$print()"},{"path":"/reference/ctsmrTMB.html","id":"method-summary-","dir":"Reference","previous_headings":"","what":"Method summary()","title":"Constructor for R6 ctsmrTMB class — ctsmrTMB","text":"Summary function fit","code":""},{"path":"/reference/ctsmrTMB.html","id":"usage-18","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructor for R6 ctsmrTMB class — ctsmrTMB","text":"","code":"ctsmrTMB$summary(correlation = FALSE)"},{"path":"/reference/ctsmrTMB.html","id":"arguments-15","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructor for R6 ctsmrTMB class — ctsmrTMB","text":"correlation boolean value. default (FALSE) provide fixed effects parameter correlation matrix.","code":""},{"path":"/reference/ctsmrTMB.html","id":"method-plot-","dir":"Reference","previous_headings":"","what":"Method plot()","title":"Constructor for R6 ctsmrTMB class — ctsmrTMB","text":"Function print model object","code":""},{"path":"/reference/ctsmrTMB.html","id":"usage-19","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructor for R6 ctsmrTMB class — ctsmrTMB","text":"","code":"ctsmrTMB$plot(   plot.obs = 1,   use.ggplot = FALSE,   extended = FALSE,   ggtheme = getggplot2theme() )"},{"path":"/reference/ctsmrTMB.html","id":"arguments-16","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructor for R6 ctsmrTMB class — ctsmrTMB","text":"plot.obs integer value. value determines state residual plot shown, states numbered order defined model object. use.ggplot boolean value. default FALSE use base plots R, TRUE ggplot2 used show return list residual state plots. extended boolean value. functionality yet. ggtheme ggplot theme. determines theme used construct ggplot2 use.ggplot=TRUE.","code":""},{"path":"/reference/ctsmrTMB.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Constructor for R6 ctsmrTMB class — ctsmrTMB","text":"objects class cloneable method.","code":""},{"path":"/reference/ctsmrTMB.html","id":"usage-20","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructor for R6 ctsmrTMB class — ctsmrTMB","text":"","code":"ctsmrTMB$clone(deep = FALSE)"},{"path":"/reference/ctsmrTMB.html","id":"arguments-17","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructor for R6 ctsmrTMB class — ctsmrTMB","text":"deep Whether make deep clone.","code":""},{"path":[]},{"path":"/reference/plot.ctsmrTMB.fit.html","id":null,"dir":"Reference","previous_headings":"","what":"Basic summary of objects of class 'ctsmrTMB' — plot.ctsmrTMB.fit","title":"Basic summary of objects of class 'ctsmrTMB' — plot.ctsmrTMB.fit","text":"Basic summary objects class 'ctsmrTMB'","code":""},{"path":"/reference/plot.ctsmrTMB.fit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Basic summary of objects of class 'ctsmrTMB' — plot.ctsmrTMB.fit","text":"","code":"# S3 method for ctsmrTMB.fit plot(   fit,   plot.obs = 1,   use.ggplot = FALSE,   extended = FALSE,   ggtheme = getggplot2theme() )"},{"path":"/reference/plot.ctsmrTMB.fit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Basic summary of objects of class 'ctsmrTMB' — plot.ctsmrTMB.fit","text":"extended logical. TRUE additional information printed","code":""},{"path":"/reference/plot.ctsmrTMB.fit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Basic summary of objects of class 'ctsmrTMB' — plot.ctsmrTMB.fit","text":"huge amount information","code":""},{"path":"/reference/plot.ctsmrTMB.html","id":null,"dir":"Reference","previous_headings":"","what":"Basic summary of objects of class 'ctsmrTMB' — plot.ctsmrTMB","title":"Basic summary of objects of class 'ctsmrTMB' — plot.ctsmrTMB","text":"Basic summary objects class 'ctsmrTMB'","code":""},{"path":"/reference/plot.ctsmrTMB.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Basic summary of objects of class 'ctsmrTMB' — plot.ctsmrTMB","text":"","code":"# S3 method for ctsmrTMB plot(   object,   plot.obs = 1,   extended = FALSE,   use.ggplot = FALSE,   ggtheme = getggplot2theme() )"},{"path":"/reference/plot.ctsmrTMB.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Basic summary of objects of class 'ctsmrTMB' — plot.ctsmrTMB","text":"extended logical. TRUE additional information printed","code":""},{"path":"/reference/plot.ctsmrTMB.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Basic summary of objects of class 'ctsmrTMB' — plot.ctsmrTMB","text":"huge amount information","code":""},{"path":"/reference/plot.ctsmrTMB.pred.html","id":null,"dir":"Reference","previous_headings":"","what":"Basic summary of objects of class 'ctsmrTMB.pred' from predict — plot.ctsmrTMB.pred","title":"Basic summary of objects of class 'ctsmrTMB.pred' from predict — plot.ctsmrTMB.pred","text":"Basic summary objects class 'ctsmrTMB.pred' predict","code":""},{"path":"/reference/plot.ctsmrTMB.pred.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Basic summary of objects of class 'ctsmrTMB.pred' from predict — plot.ctsmrTMB.pred","text":"","code":"# S3 method for ctsmrTMB.pred plot(pred.data, n.ahead = 0, state.name = NULL, ...)"},{"path":"/reference/plot.ctsmrTMB.pred.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Basic summary of objects of class 'ctsmrTMB.pred' from predict — plot.ctsmrTMB.pred","text":"huge amount information","code":""},{"path":"/reference/predict.ctsmrTMB.fit.html","id":null,"dir":"Reference","previous_headings":"","what":"Predict state estimates on ctsmrTMB.fit object. — predict.ctsmrTMB.fit","title":"Predict state estimates on ctsmrTMB.fit object. — predict.ctsmrTMB.fit","text":"Predict state estimates ctsmrTMB.fit object.","code":""},{"path":"/reference/predict.ctsmrTMB.fit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predict state estimates on ctsmrTMB.fit object. — predict.ctsmrTMB.fit","text":"","code":"# S3 method for ctsmrTMB.fit predict(   fit,   data = NULL,   x0 = NULL,   p0 = NULL,   n.step.ahead = 1,   ode.timestep = NULL,   return.state.dispersion = FALSE,   covariance = FALSE,   give.only.n.step.ahead = FALSE,   use.simulation = FALSE,   sim.timestep = NULL,   n.sim = 100,   quantiles = c(0.05, 0.5, 0.95),   return.full.simulations = FALSE )"},{"path":"/reference/predict.ctsmrTMB.fit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predict state estimates on ctsmrTMB.fit object. — predict.ctsmrTMB.fit","text":"fit ctsmrTMB.fit object calling estimate method ctsmrTMB object. data data.frame used predict update model fit based. use.simulation Boolean. TRUE simulates stochastic model returns quantiles. FALSE uses returns solution values first second order moment differential equations. Default: FALSE n.sim Integer. Number simulations performed use.simulation TRUE. Default: 100 quantiles returned state distribution quantiles use.simulation TRUE. n.step Integer. Number prediction steps updating. Default: 1","code":""},{"path":"/reference/predict.ctsmrTMB.fit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Predict state estimates on ctsmrTMB.fit object. — predict.ctsmrTMB.fit","text":"Prediction model","code":""},{"path":"/reference/predict.ctsmrTMB.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform prediction/filtration on ctsmrTMB object. — predict.ctsmrTMB","title":"Perform prediction/filtration on ctsmrTMB object. — predict.ctsmrTMB","text":"Perform prediction/filtration ctsmrTMB object.","code":""},{"path":"/reference/predict.ctsmrTMB.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform prediction/filtration on ctsmrTMB object. — predict.ctsmrTMB","text":"","code":"# S3 method for ctsmrTMB predict(   object,   data,   pars = NULL,   n.ahead = 1,   ode.timestep = NULL,   compile = FALSE,   method = \"ekf\",   return.covariance = TRUE )"},{"path":"/reference/predict.ctsmrTMB.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform prediction/filtration on ctsmrTMB object. — predict.ctsmrTMB","text":"data data.frame containing time-vector 't', observations inputs. observations can take NA-values. pars fixed parameter vector parsed objective function prediction/filtration. n.ahead integer specifying desired number time-steps (determined provided data time-vector) predictions made (integrating moment ODEs forward time without data updates). ode.timestep numeric value. Sets time step-size numerical filtering schemes. defined step-size used calculate number steps observation time-points defined provided data. calculated number steps larger N.01 N integer, time-step reduced exactly N+1 steps taken observations step-size used two following ways depending chosen method: Kalman filters: time-step used step-size numerical Forward-Euler scheme compute prior state mean covariance estimate final time solution first second order moment differential equations. TMB method: time-step used step-size Euler-Maruyama scheme simulating sample path stochastic differential equation, serves link together latent (random effects) states. compile boolean value. default (FALSE) compile C++ objective function assume already compiled corresponds specified model object. user's responsibility ensure correspondence specified model precompiled C++ object. precompiled C++ object found specified directory .e. <cppfile_directory>/<modelname>/(dll/) compile flag set TRUE. user makes changes system equations, observation equations, observation variances, algebraic relations lamperi transformations C++ object recompiled. method character vector - one either \"ekf\", \"ukf\" \"tmb\". Sets estimation method. package three available methods implemented: EKF IMPLEMENTED CURRENTLY!! natural TMB-style formulation latent states considered random effects integrated using Laplace approximation. method yields gradient (negative log) likelihood function respect fixed effects optimization. method slower although probably precision advantages, allows non-Gaussian observation noise (yet implemented). One-step / K-step residuals yet available package. (Continous-Discrete) Extended Kalman Filter system dynamics linearized handle potential non-linearities. computationally fastest method. (Continous-Discrete) Unscented Kalman Filter. higher order non-linear Kalman Filter improves mean covariance estimates system display high nonlinearity, circumvents necessity compute jacobian drift observation functions. package features currently available kalman filters, TMB limited parameter estimation. particular, straight-forward obtain k-step-ahead predictions methods (use predict S3 method), stochastic simulation also available cases long prediction horizons sought, normality assumption inaccurate. return.covariance booelan value indicate whether covariance (instead correlation) returned.","code":""},{"path":"/reference/predict.ctsmrTMB.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform prediction/filtration on ctsmrTMB object. — predict.ctsmrTMB","text":"State estimates covariance/correlations","code":""},{"path":"/reference/print.ctsmrTMB.fit.html","id":null,"dir":"Reference","previous_headings":"","what":"Basic print of objects of class 'ctsmrTMB' — print.ctsmrTMB.fit","title":"Basic print of objects of class 'ctsmrTMB' — print.ctsmrTMB.fit","text":"Basic print objects class 'ctsmrTMB'","code":""},{"path":"/reference/print.ctsmrTMB.fit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Basic print of objects of class 'ctsmrTMB' — print.ctsmrTMB.fit","text":"","code":"# S3 method for ctsmrTMB.fit print(fit)"},{"path":"/reference/print.ctsmrTMB.fit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Basic print of objects of class 'ctsmrTMB' — print.ctsmrTMB.fit","text":"huge amount information","code":""},{"path":"/reference/print.ctsmrTMB.html","id":null,"dir":"Reference","previous_headings":"","what":"Basic print of objects of class 'ctsmrTMB' — print.ctsmrTMB","title":"Basic print of objects of class 'ctsmrTMB' — print.ctsmrTMB","text":"Basic print objects class 'ctsmrTMB'","code":""},{"path":"/reference/print.ctsmrTMB.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Basic print of objects of class 'ctsmrTMB' — print.ctsmrTMB","text":"","code":"# S3 method for ctsmrTMB print(object, ...)"},{"path":"/reference/print.ctsmrTMB.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Basic print of objects of class 'ctsmrTMB' — print.ctsmrTMB","text":"huge amount information","code":""},{"path":"/reference/summary.ctsmrTMB.html","id":null,"dir":"Reference","previous_headings":"","what":"Basic summary of objects of class 'ctsmrTMB' — summary.ctsmrTMB","title":"Basic summary of objects of class 'ctsmrTMB' — summary.ctsmrTMB","text":"Basic summary objects class 'ctsmrTMB'","code":""},{"path":"/reference/summary.ctsmrTMB.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Basic summary of objects of class 'ctsmrTMB' — summary.ctsmrTMB","text":"","code":"# S3 method for ctsmrTMB summary(object, correlation = FALSE)"},{"path":"/reference/summary.ctsmrTMB.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Basic summary of objects of class 'ctsmrTMB' — summary.ctsmrTMB","text":"huge amount information","code":""},{"path":"/news/index.html","id":"ctsmrtmb-05","dir":"Changelog","previous_headings":"","what":"ctsmrTMB 0.5","title":"ctsmrTMB 0.5","text":"first release package","code":""}]
