#     X0 = X0 + f(X0,p) * dt[i]
#     # P1 = P1 + (dfdx(X0,p) %*% P0 + P0 %*% t(dfdx(X0,p)) + g(X0,p) * t(g(X0,p))) * dt[i]
#   }
# }
return(nll)
}
# obj = RTMB::MakeADFun(testfun, list(mu=1))
obj = RTMB::MakeADFun(testfun, parlist)
A = matrix(1:4,nrow=2,ncol=2)
myfun = function(A,p){
RTMB::getAll(p)
B = matrix(nrow=2,ncol=2)
B[1,1] = A[1,1]
B[1,2] = A[1,2]
B[2,1] = A[2,1]
B[2,2] = A[2,2]
return(B)
}
testfun = function(p){
e = A %*% matrix(1:2,ncol=1)
for(i in 1:3){A = A + myfun(A,p) * dt[i]}
nll = sum(t(e) %*% A %*% e)
f. = f(X0,p)
for(i in 1:3) X0 = X0 + f(X0,p) * dt[i]
RTMB::REPORT(f.)
# nll = 0
# # For Loop
# for(i in 1:2){
#
#   for(j in 1:1){
#     # Time Update
#     X0 = X0 + f(X0,p) * dt[i]
#     # P1 = P1 + (dfdx(X0,p) %*% P0 + P0 %*% t(dfdx(X0,p)) + g(X0,p) * t(g(X0,p))) * dt[i]
#   }
# }
return(nll)
}
# obj = RTMB::MakeADFun(testfun, list(mu=1))
obj = RTMB::MakeADFun(testfun, parlist)
A = matrix(1:4,nrow=2,ncol=2)
myfun = function(A,p){
RTMB::getAll(p)
B = matrix(nrow=2,ncol=2)
B[1,1] = A[1,1]
B[1,2] = A[1,2]
B[2,1] = A[2,1]
B[2,2] = A[2,2]
return(B)
}
testfun = function(p){
e = A %*% matrix(1:2,ncol=1)
for(i in 1:3){A = A + myfun(A,p) * dt[i]}
nll = sum(t(e) %*% A %*% e)
f. = f(X0,p)
for(i in 1:3) X0 = X0 + f(X0,p) * dt[i]
RTMB::REPORT(f.)
# nll = 0
# # For Loop
# for(i in 1:2){
#
#   for(j in 1:1){
#     # Time Update
#     X0 = X0 + f(X0,p) * dt[i]
#     # P1 = P1 + (dfdx(X0,p) %*% P0 + P0 %*% t(dfdx(X0,p)) + g(X0,p) * t(g(X0,p))) * dt[i]
#   }
# }
return(nll)
}
# obj = RTMB::MakeADFun(testfun, list(mu=1))
obj = RTMB::MakeADFun(testfun, parlist)
A = matrix(1:4,nrow=2,ncol=2)
myfun = function(A,p){
RTMB::getAll(p)
B = matrix(nrow=2,ncol=2)
B[1,1] = A[1,1]
B[1,2] = A[1,2]
B[2,1] = A[2,1]
B[2,2] = A[2,2]
return(B)
}
testfun = function(p){
e = A %*% matrix(1:2,ncol=1)
for(i in 1:3){A = A + myfun(A,p) * dt[i]}
nll = sum(t(e) %*% A %*% e)
f. = f(X0,p)
for(i in 1:3){X0 = X0 + f(X0,p) * dt[i]}
RTMB::REPORT(f.)
# nll = 0
# # For Loop
# for(i in 1:2){
#
#   for(j in 1:1){
#     # Time Update
#     X0 = X0 + f(X0,p) * dt[i]
#     # P1 = P1 + (dfdx(X0,p) %*% P0 + P0 %*% t(dfdx(X0,p)) + g(X0,p) * t(g(X0,p))) * dt[i]
#   }
# }
return(nll)
}
# obj = RTMB::MakeADFun(testfun, list(mu=1))
obj = RTMB::MakeADFun(testfun, parlist)
2+2
X0
A = matrix(1:4,nrow=2,ncol=2)
myfun = function(A,p){
RTMB::getAll(p)
B = matrix(nrow=2,ncol=2)
B[1,1] = A[1,1]
B[1,2] = A[1,2]
B[2,1] = A[2,1]
B[2,2] = A[2,2]
return(B)
}
testfun = function(p){
e = A %*% matrix(1:2,ncol=1)
for(i in 1:3){A = A + myfun(A,p) * dt[i]}
nll = sum(t(e) %*% A %*% e)
f. = f(X0,p)
for(i in 1:3){X0 = X0 + f(X0,p) * dt[i]}
nll = nll + sum(X0)
RTMB::REPORT(f.)
# nll = 0
# # For Loop
# for(i in 1:2){
#
#   for(j in 1:1){
#     # Time Update
#     X0 = X0 + f(X0,p) * dt[i]
#     # P1 = P1 + (dfdx(X0,p) %*% P0 + P0 %*% t(dfdx(X0,p)) + g(X0,p) * t(g(X0,p))) * dt[i]
#   }
# }
return(nll)
}
# obj = RTMB::MakeADFun(testfun, list(mu=1))
obj = RTMB::MakeADFun(testfun, parlist)
A = matrix(1:4,nrow=2,ncol=2)
myfun = function(A,p){
RTMB::getAll(p)
B = matrix(nrow=2,ncol=2)
B[1,1] = A[1,1]
B[1,2] = A[1,2]
B[2,1] = A[2,1]
B[2,2] = A[2,2]
return(B)
}
testfun = function(p){
e = A %*% matrix(1:2,ncol=1)
for(i in 1:3){A = A + myfun(A,p) * dt[i]}
nll = sum(t(e) %*% A %*% e)
f. = f(X0,p)
for(i in 1:3){X0 = X0 + f(X0,p) * dt[i]}
nll = nll + X0[1,1]
RTMB::REPORT(f.)
# nll = 0
# # For Loop
# for(i in 1:2){
#
#   for(j in 1:1){
#     # Time Update
#     X0 = X0 + f(X0,p) * dt[i]
#     # P1 = P1 + (dfdx(X0,p) %*% P0 + P0 %*% t(dfdx(X0,p)) + g(X0,p) * t(g(X0,p))) * dt[i]
#   }
# }
return(nll)
}
# obj = RTMB::MakeADFun(testfun, list(mu=1))
obj = RTMB::MakeADFun(testfun, parlist)
2+2
A = matrix(1:4,nrow=2,ncol=2)
myfun = function(A,p){
RTMB::getAll(p)
B = matrix(nrow=2,ncol=2)
B[1,1] = A[1,1]
B[1,2] = A[1,2]
B[2,1] = A[2,1]
B[2,2] = A[2,2]
return(B)
}
testfun = function(p){
e = A %*% matrix(1:2,ncol=1)
for(i in 1:3){A = A + myfun(A,p) * dt[i]}
nll = sum(t(e) %*% A %*% e)
f. = f(X0,p)
for(i in 1:3){X0 = X0 + f(X0,p) * dt[i]}
RTMB::REPORT(f.)
# nll = 0
# # For Loop
# for(i in 1:2){
#
#   for(j in 1:1){
#     # Time Update
#     X0 = X0 + f(X0,p) * dt[i]
#     # P1 = P1 + (dfdx(X0,p) %*% P0 + P0 %*% t(dfdx(X0,p)) + g(X0,p) * t(g(X0,p))) * dt[i]
#   }
# }
return(nll)
}
# obj = RTMB::MakeADFun(testfun, list(mu=1))
obj = RTMB::MakeADFun(testfun, parlist)
2+2
A = matrix(1:4,nrow=2,ncol=2)
myfun = function(A,p){
RTMB::getAll(p)
B = matrix(nrow=2,ncol=2)
B[1,1] = A[1,1]
B[1,2] = A[1,2]
B[2,1] = A[2,1]
B[2,2] = A[2,2]
return(B)
}
testfun = function(p){
e = A %*% matrix(1:2,ncol=1)
for(i in 1:3){A = A + myfun(A,p) * dt[i]}
nll = sum(t(e) %*% A %*% e)
f. = f(X0,p)
for(i in 1:3){B = B + f(B,p) * dt[i]}
RTMB::REPORT(f.)
# nll = 0
# # For Loop
# for(i in 1:2){
#
#   for(j in 1:1){
#     # Time Update
#     X0 = X0 + f(X0,p) * dt[i]
#     # P1 = P1 + (dfdx(X0,p) %*% P0 + P0 %*% t(dfdx(X0,p)) + g(X0,p) * t(g(X0,p))) * dt[i]
#   }
# }
return(nll)
}
# obj = RTMB::MakeADFun(testfun, list(mu=1))
obj = RTMB::MakeADFun(testfun, parlist)
X0
A = matrix(1:4,nrow=2,ncol=2)
B = X0
myfun = function(A,p){
RTMB::getAll(p)
B = matrix(nrow=2,ncol=2)
B[1,1] = A[1,1]
B[1,2] = A[1,2]
B[2,1] = A[2,1]
B[2,2] = A[2,2]
return(B)
}
testfun = function(p){
e = A %*% matrix(1:2,ncol=1)
for(i in 1:3){A = A + myfun(A,p) * dt[i]}
nll = sum(t(e) %*% A %*% e)
f. = f(X0,p)
for(i in 1:3){B = B + f(B,p) * dt[i]}
RTMB::REPORT(f.)
# nll = 0
# # For Loop
# for(i in 1:2){
#
#   for(j in 1:1){
#     # Time Update
#     X0 = X0 + f(X0,p) * dt[i]
#     # P1 = P1 + (dfdx(X0,p) %*% P0 + P0 %*% t(dfdx(X0,p)) + g(X0,p) * t(g(X0,p))) * dt[i]
#   }
# }
return(nll)
}
# obj = RTMB::MakeADFun(testfun, list(mu=1))
obj = RTMB::MakeADFun(testfun, parlist)
B = as.vector(X0)
b
B
A = matrix(1:4,nrow=2,ncol=2)
B = as.vector(X0)
myfun = function(A,p){
RTMB::getAll(p)
B = matrix(nrow=2,ncol=2)
B[1,1] = A[1,1]
B[1,2] = A[1,2]
B[2,1] = A[2,1]
B[2,2] = A[2,2]
return(B)
}
testfun = function(p){
e = A %*% matrix(1:2,ncol=1)
for(i in 1:3){A = A + myfun(A,p) * dt[i]}
nll = sum(t(e) %*% A %*% e)
f. = f(X0,p)
for(i in 1:3){B = B + f(B,p) * dt[i]}
RTMB::REPORT(f.)
# nll = 0
# # For Loop
# for(i in 1:2){
#
#   for(j in 1:1){
#     # Time Update
#     X0 = X0 + f(X0,p) * dt[i]
#     # P1 = P1 + (dfdx(X0,p) %*% P0 + P0 %*% t(dfdx(X0,p)) + g(X0,p) * t(g(X0,p))) * dt[i]
#   }
# }
return(nll)
}
# obj = RTMB::MakeADFun(testfun, list(mu=1))
obj = RTMB::MakeADFun(testfun, parlist)
f = function(x,p){
RTMB::getAll(p)
# n=nrow(x)
#
f = c()
f[1] exp(logtheta) * (mu-x)
f = function(x,p){
RTMB::getAll(p)
# n=nrow(x)
#
f = c()
f[1] = exp(logtheta) * (mu-x)
# f[1,1] = exp(logtheta) * (mu-x)
return(f)
}
dfdx = function(x,p){
RTMB::getAll(p)
n = nrow(x)
#
dfdx = matrix(nrow=n,ncol=n)
dfdx[1,1] = -exp(logtheta)
return(A)
}
g = function(x,p){
RTMB::getAll(p)
n = nrow(x)
#
g = matrix(nrow=n, ncol=ng)
g[1,1] = exp(logsigma)
return(g)
}
h = function(x,p){
RTMB::getAll(p)
n = nrow(x)
#
h = matrix(nrow=n,ncol=m)
h[1,1] = x[1,1]
return(h)
}
dhdx = function(x,p){
RTMB::getAll(p)
#
dhdx = matrix(nrow=1,ncol=1)
dhdx[1,1] = 1
return(dhdx)
}
set.seed(100)
tvec = .data$t
dt = diff(tvec)
dw = rnorm(length(dt),mean=0,sd=sqrt(dt))
y = .data$y
X0 = matrix(y[1])
P0 = matrix(1e-2)
X <- P <- vector("list",length=length(tvec))
X[[1]] = X0
P[[1]] = P0
nll2 = X
V.obs = 1e-2 * diag(1)
I.n = diag(1)
m = 1
ng = 1
parlist = list(logtheta=log(1), mu=1, logsigma=log(1e-2))
f(X0, parlist)
dfdx(X0, parlist)
g(X0, parlist)
h(X0, parlist)
dhdx(X0, parlist)
kalman.filter = function(par){
#
p = par
nll = 0
#
for(i in seq_along(tvec[-1])){
for(j in 1:1){
# Time Update
X0 = X0 + f(X0,p) * dt[i]
P0 = P0 + (dfdx(X0,p) %*% P0 + P0 %*% t(dfdx(X0,p)) + g(X0,p) * t(g(x0,p))) * dt[i]
}
X[[i+1]] = X0
P[[i+1]] = P0
# State Update
obs = matrix(y[i],ncol=1)
nas = !is.na(obs)
s = sum(nas)
if(s>0){
obs = obs[nas]
E. = diag(1)
e. = obs - E. %*% h(X0,p)
C. = E. %*% dhdx(X0,p)
V. = E. %*% V.obs %*% t(E.)
R. = C. %*% P0 %*% t(C.) + V.
Ri. = solve(R.)
K. = P0 %*% t(C.) %*% Ri.
# Posterior State Update
X[[i+1]]  = X0 + K. %*% e.
P[[i+1]]  = (I.n - K. %*% C.) %*% X0 %*% t(I.n - K. %*% C.) + K. %*% V. %*% t(K.)
# Likelihood Contribution
logdet = as.numeric(determinant(R., logarithm=TRUE)[["modulus"]])
nll = nll + 0.5*logdet + 0.5 * sum(t(e.) %*% (Ri. %*% e.)) + 0.5*log(2*pi)*s
}
}
return(list(nll=nll,X=X,P=P))
}
newfun = function(p){
RTMB::getAll(p)
# Initial
nll = 0
# For Loop
Ni = length(tvec)-1
for(i in 1:Ni){
for(j in 1:1){
# Time Update
X0 = X0 + f(X0,p) * dt[i]
# P1 = P1 + (dfdx(X0,p) %*% P0 + P0 %*% t(dfdx(X0,p)) + g(X0,p) * t(g(X0,p))) * dt[i]
}
# X[[i+1]] = X0
# P[[i+1]] = P0
# State Update
# obs = matrix(y[i],ncol=1)
# nas = !is.na(obs)
# s = sum(nas)
# if(s>0){
# obs = obs[nas,,drop=FALSE]
# E. = diag(1)
# e. = obs - E. %*% h(X0,p)
# C. = E. %*% dhdx(X0,p)
# V. = E. %*% V.obs %*% t(E.)
# R. = C. %*% P0 %*% t(C.) + V.
# Ri. = solve(R.)
# K. = P0 %*% t(C.) %*% Ri.
# Posterior State Update
# X[[i+1]]  = X0 + K. %*% e.
# P[[i+1]]  = (I.n - K. %*% C.) %*% X0 %*% t(I.n - K. %*% C.) + K. %*% V. %*% t(K.)
# Likelihood Contribution
# logdet = as.numeric(determinant(Re(R.))[["modulus"]])
# logdet = as.numeric(determinant(R., logarithm=TRUE)[["modulus"]])
# logdet = 1
# nll = nll + 0.5*logdet + 0.5 * sum(t(e.) %*% (Ri. %*% e.)) + 0.5*log(2*pi)*s
# }
}
# RTMB::REPORT(X)
# RTMB::REPORT(P)
# RTMB::REPORT(nll)
return(nll)
}
obj = RTMB::MakeADFun(newfun, parameters=parlist)
A = matrix(1:4,nrow=2,ncol=2)
B = as.vector(X0)
myfun = function(A,p){
RTMB::getAll(p)
B = matrix(nrow=2,ncol=2)
B[1,1] = A[1,1]
B[1,2] = A[1,2]
B[2,1] = A[2,1]
B[2,2] = A[2,2]
return(B)
}
testfun = function(p){
e = A %*% matrix(1:2,ncol=1)
for(i in 1:3){A = A + myfun(A,p) * dt[i]}
nll = sum(t(e) %*% A %*% e)
f. = f(X0,p)
for(i in 1:3){B = B + f(B,p) * dt[i]}
RTMB::REPORT(f.)
# nll = 0
# # For Loop
# for(i in 1:2){
#
#   for(j in 1:1){
#     # Time Update
#     X0 = X0 + f(X0,p) * dt[i]
#     # P1 = P1 + (dfdx(X0,p) %*% P0 + P0 %*% t(dfdx(X0,p)) + g(X0,p) * t(g(X0,p))) * dt[i]
#   }
# }
return(nll)
}
# obj = RTMB::MakeADFun(testfun, list(mu=1))
obj = RTMB::MakeADFun(testfun, parlist)
B
f(B,p)
B
A = matrix(1:4,nrow=2,ncol=2)
B = as.vector(X0)
myfun = function(A,p){
RTMB::getAll(p)
B = matrix(nrow=2,ncol=2)
B[1,1] = A[1,1]
B[1,2] = A[1,2]
B[2,1] = A[2,1]
B[2,2] = A[2,2]
return(B)
}
testfun = function(p){
e = A %*% matrix(1:2,ncol=1)
for(i in 1:3){A = A + myfun(A,p) * dt[i]}
nll = sum(t(e) %*% A %*% e)
f. = f(X0,p)
for(i in 1:3){B = B + f(B,p) * dt[i]}
RTMB::REPORT(f.)
# nll = 0
# # For Loop
# for(i in 1:2){
#
#   for(j in 1:1){
#     # Time Update
#     X0 = X0 + f(X0,p) * dt[i]
#     # P1 = P1 + (dfdx(X0,p) %*% P0 + P0 %*% t(dfdx(X0,p)) + g(X0,p) * t(g(X0,p))) * dt[i]
#   }
# }
return(nll)
}
# obj = RTMB::MakeADFun(testfun, list(mu=1))
obj = RTMB::MakeADFun(testfun, parlist)
