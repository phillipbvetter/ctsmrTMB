library(gridExtra)
library(kableExtra)
library(latex2exp) #for latex in ggplot
library(tikzDevice) #for ggplot with latex math text
library(pracma)
library(bench) #for benchmarking of code
library(scales) #for transparent ggplot legend
library(dplyr)
library(zoo)
library(tidyquant)
library(tictoc)
library(TMB)
library(reshape2)
library(patchwork)
library(devtools)
library(Rcpp)
library(RcppEigen)
library(usethis)
library(Deriv)
library(stringr)
library(purrr)
# library(tidyverse)
remotes::install_github(repo="phillipbvetter/ctsmrTMB", dependencies=TRUE)
library(ctsmrTMB)
# Load SDE Package
# devtools::document("~/github/ctsmrTMB")
# devtools::load_all("~/github/ctsmrTMB")
# ggplot2 theme
mytheme =
theme_minimal() +
theme(
text = element_text("Avenir Next Condensed",size=15),
legend.text = element_text(size=15),
axis.text = element_text(size=15),
strip.text = element_text(face="bold",size=15),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
# plot.margin = unit(c(0,0.75,0,0), "cm"),
legend.box = "vertical",
legend.position = "top",
plot.title = element_text(hjust=0.5)
)
mytheme_bigfont =
theme_minimal() +
theme(
text = element_text("Avenir Next Condensed",size=25),
legend.text = element_text(size=25),
axis.text = element_text(size=25),
strip.text = element_text(face="bold",size=25),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
# plot.margin = unit(c(0,0.75,0,0), "cm"),
legend.box = "vertical",
legend.position = "top",
plot.title = element_text(hjust=0.5)
)
mytheme_hugefont =
theme_minimal() +
theme(
text = element_text("Avenir Next Condensed",size=35),
legend.text = element_text(size=35),
axis.text = element_text(size=35),
strip.text = element_text(face="bold",size=35),
# panel.grid.major = element_blank(),
# panel.grid.minor = element_blank(),
# plot.margin = unit(c(0,0.75,0,0), "cm"),
legend.box = "vertical",
legend.position = "top",
plot.title = element_text(hjust=0.5)
)
gg_color_hue <- function(n) {
hues = seq(15, 375, length = n + 1)
hcl(h = hues, l = 65, c = 100)[1:n]
}
# Load data
maindf = readRDS("data/agtrup_df_aggregated10min.rds")
# remove negatives and zeros
maindf[,-1] = lapply(maindf[,-1],function(x) pmax(0,x))
# mutate
maindf = maindf %>%
mutate(time=as.POSIXct(time,tz="UTC")) %>%
rename(date=time) %>%
mutate(meanSBH = (Sbh1+Sbh2+Sbh3+Sbh4)/4, SS=SS1+SS2, meanQr = Qr1+Qr2+Qr3+Qr4)
# dates ranges for filtering
dates = c(paste(month.abb,"-01-2022",sep=""), paste(month.abb,"-01-2023",sep="")) %>% as.POSIXct(dates2022to2023,tz="UTC",format="%b-%d-%Y")
startdates = head(dates,length(dates)-1)
enddates = tail(dates,length(dates)-1)
df.months = vector("list",length=length(startdates)) %>% setNames(format(startdates,"%b_%Y"))
df.all = lapply(vector('list',length=5),function(x) df.months) %>% setNames(c(paste(rep("clarifier"),1:4,sep=""),"mean"))
# for clarifiers 1 to 4
for(k in 1:4){
for(i in 1:length(startdates)){
df.all[[k]][[i]] = maindf %>% dplyr::filter(startdates[i] <= date & date <= enddates[i]) %>%
dplyr::select(date,timehours,Qin,SS, matches(c(sprintf("Sbh%s",k),sprintf("Qr%s",k)))) %>%
setNames(c("date","t","Qf","Sf","Sbh","Qr"))
}
}
# for mean
for(i in 1:length(startdates)){
df.all[[5]][[i]] = maindf %>% dplyr::filter(startdates[i] <= date & date <= enddates[i]) %>%
select(date,timehours,meanSBH,Qin,SS,meanQr) %>%
setNames(c("date","t","Sbh","Qf","Sf","Qr"))
}
for(i in 1:5){
df.all[[i]] = tail(df.all[[i]][!sapply(df.all[[i]],function(x) nrow(x)==0)],-1)
}
df1 = rbind(
df.all[[1]][[1]]
# df.all[[1]][[2]],
# df.all[[1]][[3]]
)
df2 = rbind(
df.all[[1]][[2]]
)
obj1 = ctsmrTMB$new()
obj1$set_modelname("model1")
obj1$set_cppfile_directory("/Users/pbrve/phd/Kruger/R/article_work/cppfiles")
obj1$add_systems(dx ~ tau * (mu-x) * dt + sigma_x * dw1)
obj1$add_observations(Sbh ~ x)
obj1$add_observation_variances(Sbh ~ sigma_y^2)
obj1$add_algebraics(
tau ~ 1/exp(logtheta),
mu ~ invlogit(b0 + b1*Qf + b2*Sf + b3*Qf*Sf + b4*Qr)*3.5,
sigma_x ~ exp(logsigma_x),
sigma_y ~ exp(logsigma_y)
)
obj1$add_parameters(
logtheta = log(c(1, 1/60, 24)),
b0 = c(1e-5,-100,100),
b1 = c(1e-5,-100,100),
b2 = c(1e-5,-100,100),
b3 = c(1e-5,-100,100),
b4 = c(1e-5,-100,100),
logsigma_x = log(c(1e-2, 1e-10, 1)),
logsigma_y  = log(5e-2)
)
obj1$add_inputs(Sf, Qr, Qf)
obj1$set_initial_state(mean=median(df1$Sbh[1:5], na.rm=T),cov=1e-1*diag(1))
pred1 = obj1$predict(df2, k.ahead=nrow(df2)-1, ode.solver="rk4", x0=1,p0=1e-3*diag(1))
pred1
install.packages("testthat")
install.packages("testthat")
ctsmrTMB
?runExample
runExample(all=TRUE)
opt
opt$par
?ctsmrTMN
?ctsmrTMB
df1 = rbind(
df.all[[1]][[1]]
# df.all[[1]][[2]],
# df.all[[1]][[3]]
)
df2 = rbind(
df.all[[1]][[2]]
)
obj1 = ctsmrTMB$new()
obj1$set_modelname("model1")
obj1$set_cppfile_directory("/Users/pbrve/phd/Kruger/R/article_work/cppfiles")
obj1$add_systems(dx ~ tau * (mu-x) * dt + sigma_x * dw1)
obj1$add_observations(Sbh ~ x)
obj1$add_observation_variances(Sbh ~ sigma_y^2)
obj1$add_algebraics(
tau ~ 1/exp(logtheta),
mu ~ invlogit(b0 + b1*Qf + b2*Sf + b3*Qf*Sf + b4*Qr)*3.5,
sigma_x ~ exp(logsigma_x),
sigma_y ~ exp(logsigma_y)
)
obj1$add_parameters(
logtheta = log(c(1, 1/60, 24)),
b0 = c(1e-5,-100,100),
b1 = c(1e-5,-100,100),
b2 = c(1e-5,-100,100),
b3 = c(1e-5,-100,100),
b4 = c(1e-5,-100,100),
logsigma_x = log(c(1e-2, 1e-10, 1)),
logsigma_y  = log(5e-2)
)
obj1$add_inputs(Sf, Qr, Qf)
obj1$set_initial_state(mean=median(df1$Sbh[1:5], na.rm=T),cov=1e-1*diag(1))
fit1 = obj1$estimate(df1, use.hessian=T, ode.solver="rk4", method="tmb", compile=F, ode.timestep=1/10)
# nll1 = obj1$construct_nll(df1,ode.solver="rk4",method="ekf",compile=F)
# fit1b = obj1$estimate(df1, use.hessian=F, ode.solver="rk4", method="ekf", compile=F, ode.timestep=1/100)
# nll1 = obj1$construct_nll(df1, method="tmb", ode.solver="euler", compile=F)
# plot(fit1,use.ggplot=T)
pred1 = obj1$predict(df2, k.ahead=nrow(df2)-1, ode.solver="rk4", x0=1,p0=1e-3*diag(1))
# pred1 = obj1$predict(df2, k.ahead=60, ode.solver="rk4", x0=df2$Sbh[1],p0=2e-5*diag(1))
# plot(pred1$t.j,pred1$x,type="l")
# points(df2$t,df2$Sbh,col="red")
ggplot() +
geom_ribbon(aes(x=pred1$t.j, ymin=pred1$x-2*sqrt(pred1$var.x), ymax=pred1$x+2*sqrt(pred1$var.x)),fill="grey",alpha=0.5) +
geom_point(aes(x=df2$t,df2$Sbh)) +
mytheme
plot(pred1$var.x,type="l")
theta2 = fit1$par.fixed["logtheta"] %>% exp
theta3 = fit1$par.fixed["logsigma_x"] %>% exp
theta3^2/(2*(1/theta2))
pred1$var.x[4450]
fit1
fit1$states$mean$posterior
fit1$states$sd$posterior
fit1$states$sd$posterior %>% head
fit1 = obj1$estimate(df1, use.hessian=T, ode.solver="rk4", method="tmb", compile=F, ode.timestep=1/10)
fit1$convergence
fit1$nll
fit1$nll.gradient
fit1$par.fixed
fit1$sd.fixed
fit1$cov.fixed
plot(fit1)
obj1$.__enclos_env__$private$sdr
fit1 = obj1$estimate(df1, use.hessian=T, ode.solver="rk4", method="tmb", compile=F, ode.timestep=1/20)
fit1 = obj1$estimate(df1, use.hessian=F, ode.solver="rk4", method="tmb", compile=F, ode.timestep=1/20)
fit1 = obj1$estimate(df1, use.hessian=T, ode.solver="rk4", method="ekf", compile=F, ode.timestep=1/20)
fit1 = obj1$estimate(df1, use.hessian=T, ode.solver="rk4", method="tmb", compile=F, ode.timestep=1/20)
fit1 = obj1$estimate(df1, use.hessian=T, ode.solver="euler", method="ekf", compile=F, ode.timestep=1/20)
fit1 = obj1$estimate(df1, use.hessian=T, ode.solver="rk4", method="ekf", compile=F, ode.timestep=1/20)
5+5
fit1 = obj1$estimate(df1, use.hessian=T, ode.solver="rk4", method="ekf", compile=F, ode.timestep=1/10)
fit1 = obj1$estimate(df1, use.hessian=T, ode.solver="euler", method="ekf", compile=F, ode.timestep=1/10)
fit=fit1
fit1 = obj1$estimate(df1, use.hessian=T, ode.solver="rk4", method="ekf", compile=F, ode.timestep=1/10)
fit$nll
fit1$nll
5+5
10+10
obj1$.__enclos_env__$private$cppfile.directory
obj1$set_cppfile_directory("cppfiles")
obj1$.__enclos_env__$private$cppfile.directory
getwd
getwd()
obj1 = ctsmrTMB$new()
obj1$set_modelname("model1")
obj1$set_cppfile_directory("/Users/pbrve/phd/Kruger/R/article_work/cppfiles")
obj1$set_cppfile_directory("cppfiles")
obj1$add_systems(dx ~ tau * (mu-x) * dt + sigma_x * dw1)
obj1$add_observations(Sbh ~ x)
obj1$add_observation_variances(Sbh ~ sigma_y^2)
obj1$add_algebraics(
tau ~ 1/exp(logtheta),
mu ~ invlogit(b0 + b1*Qf + b2*Sf + b3*Qf*Sf + b4*Qr)*3.5,
sigma_x ~ exp(logsigma_x),
sigma_y ~ exp(logsigma_y)
)
obj1$add_parameters(
logtheta = log(c(1, 1/60, 24)),
b0 = c(1e-5,-100,100),
b1 = c(1e-5,-100,100),
b2 = c(1e-5,-100,100),
b3 = c(1e-5,-100,100),
b4 = c(1e-5,-100,100),
logsigma_x = log(c(1e-2, 1e-10, 1)),
logsigma_y  = log(5e-2)
)
obj1$add_inputs(Sf, Qr, Qf)
obj1$set_initial_state(mean=median(df1$Sbh[1:5], na.rm=T),cov=1e-1*diag(1))
fit1 = obj1$estimate(df1, use.hessian=T, ode.solver="rk4", method="ekf", compile=F, ode.timestep=1/10)
obj1$.__enclos_env__$private$cppfile.directory
obj1$.__enclos_env__$private$cppfile.path
obj1 = ctsmrTMB$new()
obj1$set_modelname("model1")
# obj1$set_cppfile_directory("/Users/pbrve/phd/Kruger/R/article_work/cppfiles")
obj1$set_cppfile_directory("cppfiles")
obj1$add_systems(dx ~ tau * (mu-x) * dt + sigma_x * dw1)
obj1$add_observations(Sbh ~ x)
obj1$add_observation_variances(Sbh ~ sigma_y^2)
obj1$add_algebraics(
tau ~ 1/exp(logtheta),
mu ~ invlogit(b0 + b1*Qf + b2*Sf + b3*Qf*Sf + b4*Qr)*3.5,
sigma_x ~ exp(logsigma_x),
sigma_y ~ exp(logsigma_y)
)
obj1$add_parameters(
logtheta = log(c(1, 1/60, 24)),
b0 = c(1e-5,-100,100),
b1 = c(1e-5,-100,100),
b2 = c(1e-5,-100,100),
b3 = c(1e-5,-100,100),
b4 = c(1e-5,-100,100),
logsigma_x = log(c(1e-2, 1e-10, 1)),
logsigma_y  = log(5e-2)
)
obj1$add_inputs(Sf, Qr, Qf)
obj1$set_initial_state(mean=median(df1$Sbh[1:5], na.rm=T),cov=1e-1*diag(1))
fit1 = obj1$estimate(df1, use.hessian=T, ode.solver="rk4", method="ekf", compile=F, ode.timestep=1/10)
obj1$.__enclos_env__$private$modelname
obj1$.__enclos_env__$private$modelname.with.method
obj1$.__enclos_env__$private$cppfile.directory
obj1$.__enclos_env__$private$modelname
fit1 = obj1$estimate(df1, use.hessian=T, ode.solver="rk4", method="ekf", compile=F, ode.timestep=1/10)
obj1$.__enclos_env__$private$modelname
obj1$.__enclos_env__$private$cppfile.directory
obj1$.__enclos_env__$private$cppfile.path
fit1 = obj1$estimate(df1, use.hessian=T, ode.solver="rk4", method="ekf", compile=T, ode.timestep=1/10)
obj1$.__enclos_env__$private$cppfile.directory
obj1$.__enclos_env__$private$cppfile.path
ctsmrTMB:::write_cppfile(obj,obj1$.__enclos_env__$private)
?file
getwd()
?compile
TMB::compile("cppfiles/model1.cpp")
obj1 = ctsmrTMB$new()
obj1$set_modelname("model1")
# obj1$set_cppfile_directory("/Users/pbrve/phd/Kruger/R/article_work/cppfiles")
obj1$set_cppfile_directory("~/cppfiles")
obj1$add_systems(dx ~ tau * (mu-x) * dt + sigma_x * dw1)
obj1$add_observations(Sbh ~ x)
obj1$add_observation_variances(Sbh ~ sigma_y^2)
obj1$add_algebraics(
tau ~ 1/exp(logtheta),
mu ~ invlogit(b0 + b1*Qf + b2*Sf + b3*Qf*Sf + b4*Qr)*3.5,
sigma_x ~ exp(logsigma_x),
sigma_y ~ exp(logsigma_y)
)
obj1$add_parameters(
logtheta = log(c(1, 1/60, 24)),
b0 = c(1e-5,-100,100),
b1 = c(1e-5,-100,100),
b2 = c(1e-5,-100,100),
b3 = c(1e-5,-100,100),
b4 = c(1e-5,-100,100),
logsigma_x = log(c(1e-2, 1e-10, 1)),
logsigma_y  = log(5e-2)
)
obj1$add_inputs(Sf, Qr, Qf)
obj1$set_initial_state(mean=median(df1$Sbh[1:5], na.rm=T),cov=1e-1*diag(1))
fit1 = obj1$estimate(df1, use.hessian=T, ode.solver="rk4", method="ekf", compile=F, ode.timestep=1/10)
5+5
getwd()
setwd("~/")
getwd()
obj1 = ctsmrTMB$new()
obj1$set_modelname("model1")
obj1$set_cppfile_directory("/Users/pbrve/phd/Kruger/R/article_work/cppfiles")
# obj1$set_cppfile_directory("/Users/pbrve/phd/Kruger/R/article_work/cppfiles")
obj1$set_cppfile_directory("cppfiles")
obj1$add_systems(dx ~ tau * (mu-x) * dt + sigma_x * dw1)
obj1$add_observations(Sbh ~ x)
# obj1$set_cppfile_directory("/Users/pbrve/phd/Kruger/R/article_work/cppfiles")
obj1$set_cppfile_directory("cppfiles")
5+5
source("~/.active-rstudio-document", echo=TRUE)
getwd()
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
warnings()
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
# Plot all 10-step predictions against data
pred$k.ahead==10
# Plot all 10-step predictions against data
pred[pred$k.ahead==10,]
# Plot all 10-step predictions against data
pred10step = pred[pred$k.ahead==10,]
pred10step
pred10step %>% head
library(tidyverse)
head(pred10step)
plot(t.obs,y,col="steelblue")
plot(t.obs,y,col="steelblue",pch=16)
ggplot() +
geom_point(aes(x=t.obs,y=y),color="steelblue") +
theme_minimal()
ggplot() +
geom_line(aes(x=t.obs,y=y),color="steelblue") +
theme_minimal()
ggplot() +
geom_point(aes(x=t.obs,y=y),color="steelblue") +
theme_minimal()
ggplot() +
geom_point(aes(x=t.obs,y=y),color="steelblue") +
geom_point(aes(x=pred10step$t.j,pred10step$x),color="tomato") +
theme_minimal()
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
ggplot() +
ggplot() +
geom_point(aes(x=t.obs,y=y),color="steelblue") +
geom_ribbon(aes(x=pred10step$t.j,ymin=pred10step$x-2*sqrt(pred10step$var.x),ymax=pred10step$x+2*sqrt(pred10step$var.x)),color="tomato") +
theme_minimal()
ggplot() +
geom_point(aes(x=t.obs,y=y),color="steelblue") +
geom_ribbon(aes(x=pred10step$t.j,ymin=pred10step$x-2*sqrt(pred10step$var.x),ymax=pred10step$x+2*sqrt(pred10step$var.x)),fill="tomato",alpha=0.5) +
theme_minimal()
ggplot() +
geom_point(aes(x=t.obs,y=y),color="steelblue") +
geom_point(aes(x=pred10step$t.j,pred10step$x),color="tomato") +
# geom_ribbon(aes(x=pred10step$t.j,ymin=pred10step$x-2*sqrt(pred10step$var.x),ymax=pred10step$x+2*sqrt(pred10step$var.x)),fill="tomato",alpha=0.5) +
theme_minimal()
ggplot() +
geom_point(aes(x=t.obs,y=y),color="steelblue") +
geom_point(aes(x=pred10step$t.j,pred10step$x),color="tomato") +
geom_errorbar(aes(x=pred10step$t.j,ymin=pred10step$x-2*sqrt(pred10step$var.x),ymax=ymin=pred10step$x+2*sqrt(pred10step$var.x)))
ggplot() +
geom_point(aes(x=t.obs,y=y),color="steelblue") +
geom_point(aes(x=pred10step$t.j,pred10step$x),color="tomato") +
geom_errorbar(aes(x=pred10step$t.j,ymin=pred10step$x-2*sqrt(pred10step$var.x),ymax=pred10step$x+2*sqrt(pred10step$var.x))) +
# geom_ribbon(aes(x=pred10step$t.j,ymin=pred10step$x-2*sqrt(pred10step$var.x),ymax=pred10step$x+2*sqrt(pred10step$var.x)),fill="tomato",alpha=0.5) +
theme_minimal()
ggplot() +
geom_point(aes(x=t.obs,y=y),color="steelblue") +
geom_point(aes(x=pred10step$t.j,pred10step$x),color="tomato") +
geom_errorbar(aes(x=pred10step$t.j,ymin=pred10step$x-2*sqrt(pred10step$var.x),ymax=pred10step$x+2*sqrt(pred10step$var.x)),color="tomato") +
# geom_ribbon(aes(x=pred10step$t.j,ymin=pred10step$x-2*sqrt(pred10step$var.x),ymax=pred10step$x+2*sqrt(pred10step$var.x)),fill="tomato",alpha=0.5) +
theme_minimal()
5+5
ggplot() +
geom_point(aes(x=t.obs,y=y),color="steelblue") +
geom_point(aes(x=pred10step$t.j,pred10step$x),color="tomato") +
geom_errorbar(aes(x=pred10step$t.j,ymin=pred10step$x-3*sqrt(pred10step$var.x),ymax=pred10step$x+3*sqrt(pred10step$var.x)),color="tomato") +
theme_minimal()
ggplot() +
geom_point(aes(x=t.obs,y=y),color="steelblue") +
geom_point(aes(x=pred10step$t.j,pred10step$x),color="tomato") +
geom_errorbar(aes(x=pred10step$t.j,ymin=pred10step$x-2*sqrt(pred10step$var.x),ymax=pred10step$x+2*sqrt(pred10step$var.x)),color="tomato") +
theme_minimal()
5+5
5+5
# Check one-step-ahead residuals
plot(fit, use.ggplot=T)
# Plot all 10-step predictions against data
pred10step = pred[pred$k.ahead==10,]
ggplot() +
geom_point(aes(x=t.obs,y=y),color="steelblue") +
geom_point(aes(x=pred10step$t.j,pred10step$x),color="tomato") +
geom_errorbar(aes(x=pred10step$t.j,ymin=pred10step$x-2*sqrt(pred10step$var.x),ymax=pred10step$x+2*sqrt(pred10step$var.x)),color="tomato") +
theme_minimal()
ggplot() +
geom_ribbon(aes(x=t.est, ymin=x.mean-2*x.sd, ymax=x.mean+2*x.sd),fill="grey", alpha=0.9) +
geom_line(aes(x=t.sim,y=x)) +
geom_line(aes(x=t.est, x.mean),col="blue") +
geom_point(aes(x=t.obs,y=y),col="red",size=2) +
theme_minimal()
ggplot() +
geom_ribbon(aes(x=t.est, ymin=x.mean-2*x.sd, ymax=x.mean+2*x.sd),fill="grey", alpha=0.9) +
geom_line(aes(x=t.sim,y=x)) +
geom_line(aes(x=t.est, x.mean),col="steelblue") +
geom_point(aes(x=t.obs,y=y),col="tomato",size=2) +
theme_minimal()
ggplot() +
geom_ribbon(aes(x=t.est, ymin=x.mean-2*x.sd, ymax=x.mean+2*x.sd),fill="grey", alpha=0.9) +
geom_line(aes(x=t.sim,y=x)) +
geom_line(aes(x=t.est, x.mean),col="steelblue",lwd=2) +
geom_point(aes(x=t.obs,y=y),col="tomato",size=2) +
theme_minimal()
ggplot() +
geom_ribbon(aes(x=t.est, ymin=x.mean-2*x.sd, ymax=x.mean+2*x.sd),fill="grey", alpha=0.9) +
geom_line(aes(x=t.sim,y=x)) +
geom_line(aes(x=t.est, x.mean),col="steelblue",lwd=1) +
geom_point(aes(x=t.obs,y=y),col="tomato",size=2) +
theme_minimal()
ggplot() +
geom_ribbon(aes(x=t.est, ymin=x.mean-2*x.sd, ymax=x.mean+2*x.sd),fill="grey", alpha=0.9) +
geom_line(aes(x=t.sim,y=x)) +
geom_line(aes(x=t.est, x.mean),col="steelblue",lwd=0.5) +
geom_point(aes(x=t.obs,y=y),col="tomato",size=2) +
theme_minimal()
ggplot() +
geom_ribbon(aes(x=t.est, ymin=x.mean-2*x.sd, ymax=x.mean+2*x.sd),fill="grey", alpha=0.9) +
geom_line(aes(x=t.sim,y=x)) +
geom_line(aes(x=t.est, x.mean),col="steelblue") +
geom_point(aes(x=t.obs,y=y),col="tomato",size=2) +
theme_minimal()
ggplot() +
geom_ribbon(aes(x=t.est, ymin=x.mean-2*x.sd, ymax=x.mean+2*x.sd),fill="grey", alpha=0.9) +
geom_line(aes(x=t.sim,y=x)) +
geom_point(aes(x=t.obs,y=y),col="tomato",size=2) +
geom_line(aes(x=t.est, x.mean),col="steelblue") +
theme_minimal()
ggplot() +
geom_ribbon(aes(x=t.est, ymin=x.mean-2*x.sd, ymax=x.mean+2*x.sd),fill="grey", alpha=0.9) +
geom_line(aes(x=t.sim,y=x)) +
geom_point(aes(x=t.obs,y=y),col="tomato",size=2) +
geom_line(aes(x=t.est, x.mean),col="steelblue",size=2) +
theme_minimal()
ggplot() +
geom_ribbon(aes(x=t.est, ymin=x.mean-2*x.sd, ymax=x.mean+2*x.sd),fill="grey", alpha=0.9) +
geom_line(aes(x=t.sim,y=x)) +
geom_point(aes(x=t.obs,y=y),col="tomato",size=2) +
geom_line(aes(x=t.est, x.mean),col="steelblue",size=1) +
theme_minimal()
ggplot() +
geom_ribbon(aes(x=t.est, ymin=x.mean-2*x.sd, ymax=x.mean+2*x.sd),fill="grey", alpha=0.9) +
geom_line(aes(x=t.est, x.mean),col="steelblue",size=1) +
geom_line(aes(x=t.sim,y=x)) +
geom_point(aes(x=t.obs,y=y),col="tomato",size=2) +
theme_minimal()
# Predict to obtain k-step-ahead predictions to see model forecasting ability
pred = obj$predict(data=.data, k.ahead=10, method="ekf", ode.solver="rk4")
5+5
.data
.data$t
source("~/.active-rstudio-document", echo=TRUE)
2+2
2+2
setwd("/Users/pbrve/github/ctsmrTMB")
# pkgdown::build_home_index()
# pkgdown::init_site()
# pkgdown::build_articles_index()
pkgdown::build_articles()
install.packages("TMB",type="source")
install.packages("TMB", type = "source")
