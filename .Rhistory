) +
geom_line(aes(x=fit$states$mean$prior$t,
y=fit$states$mean$prior$X,
color="Prior State Estimates")
) +
geom_ribbon(aes(x=fit$states$mean$posterior$t,
ymin=fit$states$mean$posterior$X-2*fit$states$sd$posterior$X,
ymax=fit$states$mean$posterior$X+2*fit$states$sd$posterior$X),
fill="yellow",alpha=0.5) +
geom_ribbon(aes(x=fit$states$mean$prior$t,
ymin=fit$states$mean$prior$X-2*fit$states$sd$prior$X,
ymax=fit$states$mean$prior$X+2*fit$states$sd$prior$X),
fill="grey",alpha=0.5) +
geom_point(aes(x=data$t,data$Y,color="Observations")) +
guides(color=guide_legend(override.aes=list(shape=c(16,NA,NA),
size=c(2,NA,NA),
linetype=c(NA,1,1),
lwd=c(NA,1,1)))) +
labs(
x = "Time",
y = "",
color="") +
mytheme
ggplot() +
geom_line(aes(x=fit$states$mean$posterior$t,
y=fit$states$mean$posterior$X,
color="Posterior State Estimates"),
lwd=1
) +
geom_line(aes(x=fit$states$mean$prior$t,
y=fit$states$mean$prior$X,
color="Prior State Estimates"),
lwd=1
) +
geom_ribbon(aes(x=fit$states$mean$posterior$t,
ymin=fit$states$mean$posterior$X-2*fit$states$sd$posterior$X,
ymax=fit$states$mean$posterior$X+2*fit$states$sd$posterior$X),
fill="yellow",alpha=0.5) +
geom_ribbon(aes(x=fit$states$mean$prior$t,
ymin=fit$states$mean$prior$X-2*fit$states$sd$prior$X,
ymax=fit$states$mean$prior$X+2*fit$states$sd$prior$X),
fill="grey",alpha=0.5) +
geom_point(aes(x=data$t,data$Y,color="Observations")) +
guides(color=guide_legend(override.aes=list(shape=c(16,NA,NA),
size=c(2,NA,NA),
linetype=c(NA,1,1),
lwd=c(NA,1,1)))) +
labs(
x = "Time",
y = "",
color="") +
mytheme
ggplot() +
geom_line(aes(x=fit$states$mean$posterior$t,
y=fit$states$mean$posterior$X,
color="Posterior State Estimates"),
lwd=1
) +
geom_line(aes(x=fit$states$mean$prior$t,
y=fit$states$mean$prior$X,
color="Prior State Estimates"),
lwd=1
) +
# geom_ribbon(aes(x=fit$states$mean$posterior$t,
#                 ymin=fit$states$mean$posterior$X-2*fit$states$sd$posterior$X,
#                 ymax=fit$states$mean$posterior$X+2*fit$states$sd$posterior$X),
#             fill="yellow",alpha=0.5) +
geom_ribbon(aes(x=fit$states$mean$prior$t,
ymin=fit$states$mean$prior$X-2*fit$states$sd$prior$X,
ymax=fit$states$mean$prior$X+2*fit$states$sd$prior$X),
fill="grey",alpha=0.5) +
geom_point(aes(x=data$t,data$Y,color="Observations")) +
guides(color=guide_legend(override.aes=list(shape=c(16,NA,NA),
size=c(2,NA,NA),
linetype=c(NA,1,1),
lwd=c(NA,1,1)))) +
labs(
x = "Time",
y = "",
color="") +
mytheme
ggplot() +
geom_line(aes(x=fit$states$mean$posterior$t,
y=fit$states$mean$posterior$X,
color="Posterior State Estimates"),
lwd=1
) +
# geom_line(aes(x=fit$states$mean$prior$t,
#               y=fit$states$mean$prior$X,
#               color="Prior State Estimates"),
#           lwd=1
# ) +
# geom_ribbon(aes(x=fit$states$mean$posterior$t,
#                 ymin=fit$states$mean$posterior$X-2*fit$states$sd$posterior$X,
#                 ymax=fit$states$mean$posterior$X+2*fit$states$sd$posterior$X),
#             fill="yellow",alpha=0.5) +
geom_ribbon(aes(x=fit$states$mean$prior$t,
ymin=fit$states$mean$prior$X-2*fit$states$sd$prior$X,
ymax=fit$states$mean$prior$X+2*fit$states$sd$prior$X),
fill="grey",alpha=0.5) +
geom_point(aes(x=data$t,data$Y,color="Observations")) +
guides(color=guide_legend(override.aes=list(shape=c(16,NA,NA),
size=c(2,NA,NA),
linetype=c(NA,1,1),
lwd=c(NA,1,1)))) +
labs(
x = "Time",
y = "",
color="") +
mytheme
ggplot() +
geom_line(aes(x=fit$states$mean$posterior$t,
y=fit$states$mean$posterior$X,
color="Posterior State Estimates"),
lwd=1
) +
# geom_line(aes(x=fit$states$mean$prior$t,
#               y=fit$states$mean$prior$X,
#               color="Prior State Estimates"),
#           lwd=1
# ) +
# geom_ribbon(aes(x=fit$states$mean$posterior$t,
#                 ymin=fit$states$mean$posterior$X-2*fit$states$sd$posterior$X,
#                 ymax=fit$states$mean$posterior$X+2*fit$states$sd$posterior$X),
#             fill="yellow",alpha=0.5) +
geom_ribbon(aes(x=fit$states$mean$prior$t,
ymin=fit$states$mean$prior$X-2*fit$states$sd$prior$X,
ymax=fit$states$mean$prior$X+2*fit$states$sd$prior$X),
fill="grey",alpha=0.5) +
geom_point(aes(x=data$t,data$Y,color="Observations")) +
# guides(color=guide_legend(override.aes=list(shape=c(16,NA,NA),
#                                             size=c(2,NA,NA),
#                                             linetype=c(NA,1,1),
#                                             lwd=c(NA,1,1)))) +
labs(
x = "Time",
y = "",
color="") +
mytheme
# pkgdown::build_home_index()
# pkgdown::init_site()
# pkgdown::build_articles_index()
pkgdown::build_articles()
ggplot() +
geom_line(aes(x=fit$states$mean$posterior$t,
y=fit$states$mean$posterior$X,
color="Posterior (Updated) State Estimates"),
lwd=1
) +
# geom_line(aes(x=fit$states$mean$prior$t,
#               y=fit$states$mean$prior$X,
#               color="Prior State Estimates"),
#           lwd=1
# ) +
# geom_ribbon(aes(x=fit$states$mean$posterior$t,
#                 ymin=fit$states$mean$posterior$X-2*fit$states$sd$posterior$X,
#                 ymax=fit$states$mean$posterior$X+2*fit$states$sd$posterior$X),
#             fill="yellow",alpha=0.5) +
geom_ribbon(aes(x=fit$states$mean$prior$t,
ymin=fit$states$mean$prior$X-2*fit$states$sd$prior$X,
ymax=fit$states$mean$prior$X+2*fit$states$sd$prior$X),
fill="grey",alpha=0.5) +
geom_point(aes(x=data$t,data$Y,color="Observations")) +
# guides(color=guide_legend(override.aes=list(shape=c(16,NA,NA),
#                                             size=c(2,NA,NA),
#                                             linetype=c(NA,1,1),
#                                             lwd=c(NA,1,1)))) +
labs(
x = "Time",
y = "",
color="") +
mytheme
ggplot() +
geom_line(aes(x=fit$states$mean$posterior$t,
y=fit$states$mean$posterior$X,
color="PosteriorState Estimates"),
lwd=1
) +
geom_line(aes(x=fit$states$mean$prior$t,
y=fit$states$mean$prior$X,
color="Prior State Estimates"),
lwd=1
) +
# geom_ribbon(aes(x=fit$states$mean$posterior$t,
#                 ymin=fit$states$mean$posterior$X-2*fit$states$sd$posterior$X,
#                 ymax=fit$states$mean$posterior$X+2*fit$states$sd$posterior$X),
#             fill="yellow",alpha=0.5) +
geom_ribbon(aes(x=fit$states$mean$prior$t,
ymin=fit$states$mean$prior$X-2*fit$states$sd$prior$X,
ymax=fit$states$mean$prior$X+2*fit$states$sd$prior$X),
fill="grey",alpha=0.5) +
geom_point(aes(x=data$t,data$Y,color="Observations")) +
# guides(color=guide_legend(override.aes=list(shape=c(16,NA,NA),
#                                             size=c(2,NA,NA),
#                                             linetype=c(NA,1,1),
#                                             lwd=c(NA,1,1)))) +
labs(
x = "Time",
y = "",
color="") +
mytheme
ggplot() +
geom_line(aes(x=fit$states$mean$posterior$t,
y=fit$states$mean$posterior$X,
color="Posterior State Estimates"),
lwd=1
) +
geom_line(aes(x=fit$states$mean$prior$t,
y=fit$states$mean$prior$X,
color="Prior State Estimates"),
lwd=1
) +
# geom_ribbon(aes(x=fit$states$mean$posterior$t,
#                 ymin=fit$states$mean$posterior$X-2*fit$states$sd$posterior$X,
#                 ymax=fit$states$mean$posterior$X+2*fit$states$sd$posterior$X),
#             fill="yellow",alpha=0.5) +
geom_ribbon(aes(x=fit$states$mean$prior$t,
ymin=fit$states$mean$prior$X-2*fit$states$sd$prior$X,
ymax=fit$states$mean$prior$X+2*fit$states$sd$prior$X),
fill="grey",alpha=0.5) +
geom_point(aes(x=data$t,data$Y,color="Observations")) +
# guides(color=guide_legend(override.aes=list(shape=c(16,NA,NA),
#                                             size=c(2,NA,NA),
#                                             linetype=c(NA,1,1),
#                                             lwd=c(NA,1,1)))) +
labs(
x = "Time",
y = "",
color="") +
mytheme
t
t = fit$states$mean$posterior$t
xprior = fit$states$mean$prior$X
xpost = fit$states$mean$posterior$X
xpost_sd = fit$states$sd$posterior$X
ggplot() +
geom_line(aes(x=t,y=xpost,color="Posterior State Estimates"),lwd=1) +
geom_line(aes(x=t,y=xprior,color="Prior State Estimates"),lwd=1) +
geom_ribbon(aes(x=t,ymin=xpost-2*xpost_sd,ymax=xpost+2*xpost_sd),fill="grey",alpha=0.5) +
geom_point(aes(x=data$t,data$Y,color="Observations")) +
# guides(color=guide_legend(override.aes=list(shape=c(16,NA,NA),
#                                             size=c(2,NA,NA),
#                                             linetype=c(NA,1,1),
#                                             lwd=c(NA,1,1)))) +
labs(
x = "Time",
y = "",
color="") +
mytheme
t = fit$states$mean$posterior$t
xprior = fit$states$mean$prior$X
xpost = fit$states$mean$posterior$X
xpost_sd = fit$states$sd$posterior$X
ggplot() +
geom_line(aes(x=t,y=xpost,color="State Estimates (Posterior)"),lwd=1) +
geom_line(aes(x=t,y=xprior,color="State Estimates (Prior)"),lwd=1) +
geom_ribbon(aes(x=t,ymin=xpost-2*xpost_sd,ymax=xpost+2*xpost_sd),fill="grey",alpha=0.5) +
geom_point(aes(x=data$t,data$Y,color="Observations")) +
guides(color=guide_legend(override.aes=list(shape=c(16,NA,NA),
size=c(2,NA,NA),
linetype=c(NA,1,1),
lwd=c(NA,1,1)))) +
labs(
x = "Time",
y = "",
color="") +
mytheme
t = fit$states$mean$posterior$t
xprior = fit$states$mean$prior$X
xpost = fit$states$mean$posterior$X
xpost_sd = fit$states$sd$posterior$X
ggplot() +
geom_line(aes(x=t,y=xpost,color="State Estimates (Posterior)"),lwd=1) +
geom_line(aes(x=t,y=xprior,color="State Estimates (Prior)"),lwd=1) +
geom_ribbon(aes(x=t,ymin=xpost-2*xpost_sd,ymax=xpost+2*xpost_sd),fill="grey",alpha=0.5) +
geom_point(aes(x=data$t,data$Y,color="Observations")) +
guides(color=guide_legend(override.aes=list(shape=c(16,NA,NA),size=c(2,NA,NA),linetype=c(NA,1,1),lwd=c(NA,1,1)))) +
labs(
x = "Time",
y = "",
color="") +
mytheme
t = fit$states$mean$posterior$t
xprior = fit$states$mean$prior$X
xpost = fit$states$mean$posterior$X
xpost_sd = fit$states$sd$posterior$X
ggplot() +
geom_line(aes(x=t,y=xpost,color="State Estimates (Posterior)"),lwd=1) +
geom_line(aes(x=t,y=xprior,color="State Estimates (Prior)"),lwd=1) +
geom_ribbon(aes(x=t,ymin=xpost-2*xpost_sd,ymax=xpost+2*xpost_sd),fill="grey",alpha=0.5) +
geom_point(aes(x=data$t,data$Y,color="Observations")) +
guides(color=guide_legend(override.aes=list(shape=c(16,NA,NA),size=c(2,NA,NA),linetype=c(NA,1,1),lwd=c(NA,1,1)))) +
labs(x = "Time", y = "", color="") +
mytheme
# pkgdown::build_home_index()
# pkgdown::init_site()
# pkgdown::build_articles_index()
pkgdown::build_articles()
# pkgdown::build_home_index()
# pkgdown::init_site()
# pkgdown::build_articles_index()
pkgdown::build_articles()
print(fit)
print(fit)
# pkgdown::build_home_index()
# pkgdown::init_site()
# pkgdown::build_articles_index()
pkgdown::build_articles()
# pkgdown::build_home_index()
# pkgdown::init_site()
# pkgdown::build_articles_index()
pkgdown::build_articles()
# pkgdown::build_home_index()
# pkgdown::init_site()
# pkgdown::build_articles_index()
pkgdown::build_articles()
# pkgdown::build_home_index()
# pkgdown::init_site()
# pkgdown::build_articles_index()
pkgdown::build_articles()
# pkgdown::build_home_index()
# pkgdown::init_site()
# pkgdown::build_articles_index()
pkgdown::build_articles()
# pkgdown::build_home_index()
# pkgdown::init_site()
# pkgdown::build_articles_index()
pkgdown::build_articles()
library(ctsmrTMB)
obj = ctsmrTMB$new()
print(obj)
obj$add_systems(dX ~ theta * (mu - X) * dt + sigma_x * dw)
obj$add_observations(Y ~ X)
obj$add_observation_variances(Y ~ sigma_y^2*U)
print(obj)
obj$add_inputs(U)
obj$add_parameters(
theta   = c(initial = 5,    lower = 0,    upper = 20),
mu      = c(initial = 0,    lower = -10,  upper = 10),
sigma_x = c(initial = 1e-1, lower = 1e-5, upper = 5),
sigma_y = c(initial = 1e-1, lower = 1e-5, upper = 5)
)
obj$add_parameters(
sigma_y  = 1e-1
)
print(obj)
obj$set_initial_state(mean=3, cov=1e-1*diag(1))
# Choosing parameters
set.seed(10)
theta=10; mu=1; sigma_x=1; sigma_y=1e-1
# Creating simulation path
dt.sim = 1e-3
t.sim = seq(0,1,by=dt.sim)
dw = rnorm(length(t.sim)-1,sd=sqrt(dt.sim))
x = 3
for(i in 1:(length(t.sim)-1)) {
x[i+1] = x[i] + theta*(mu-x[i])*dt.sim + sigma_x*dw[i]
}
# Extract observations from simulation and add noise
dt.obs = 1e-2
t.obs = seq(0,1,by=dt.obs)
y = x[t.sim %in% t.obs] + sigma_y * rnorm(length(t.obs))
# Create data.frame
data = data.frame(
t = t.obs,
Y = y,
U = c(rep(c(1,2),times=round(length(y)/2)),1)
)
fit = obj$estimate(data)
print(fit)
library(ggplot2)
library(patchwork)
# ggplot2 theme
mytheme =
theme_minimal() +
theme(
text = element_text("Avenir Next Condensed",size=15),
legend.text = element_text(size=15),
axis.text = element_text(size=15),
strip.text = element_text(face="bold",size=15),
# panel.grid.major = element_blank(),
# panel.grid.minor = element_blank(),
# plot.margin = unit(c(0,0.75,0,0), "cm"),
legend.box = "vertical",
legend.position = "top",
plot.title = element_text(hjust=0.5)
)
t = fit$states$mean$posterior$t
xprior = fit$states$mean$prior$X
xpost = fit$states$mean$posterior$X
xpost_sd = fit$states$sd$posterior$X
ggplot() +
geom_line(aes(x=t,y=xpost,color="State Estimates (Posterior)"),lwd=1) +
geom_line(aes(x=t,y=xprior,color="State Estimates (Prior)"),lwd=1) +
geom_ribbon(aes(x=t,ymin=xpost-2*xpost_sd,ymax=xpost+2*xpost_sd),fill="grey",alpha=0.5) +
geom_point(aes(x=data$t,data$Y,color="Observations")) +
guides(color=guide_legend(override.aes=list(shape=c(16,NA,NA),size=c(2,NA,NA),linetype=c(NA,1,1),lwd=c(NA,1,1)))) +
labs(x = "Time", y = "", color="") +
mytheme
plot(fit, use.ggplot=TRUE)
obj$add_algebraics(theta ~ exp(logtheta))
obj$add_parameters(logtheta = log(c(initial=5, lower=0, upper=10)))
fit$par.fixed
fit$sd.fixed
fit$cov.fixed
# pkgdown::build_home_index()
# pkgdown::init_site()
# pkgdown::build_articles_index()
pkgdown::build_articles()
fit$tvalue
fit$Pr.tvalue
fit$convergence
fit$tvalue
fit$Pr.tvalue
# pkgdown::build_home_index()
# pkgdown::init_site()
# pkgdown::build_articles_index()
pkgdown::build_articles()
# pkgdown::build_home_index()
# pkgdown::init_site()
# pkgdown::build_articles_index()
pkgdown::build_articles()
# pkgdown::build_home_index()
# pkgdown::init_site()
# pkgdown::build_articles_index()
pkgdown::build_articles()
# pkgdown::build_home_index()
# pkgdown::init_site()
# pkgdown::build_articles_index()
pkgdown::build_articles()
# pkgdown::build_home_index()
# pkgdown::init_site()
# pkgdown::build_articles_index()
pkgdown::build_articles()
plot(fit, use.ggplot=TRUE)
plot(fit, use.ggplot=TRUE)
# pkgdown::build_home_index()
# pkgdown::init_site()
# pkgdown::build_articles_index()
pkgdown::build_articles()
# pkgdown::build_home_index()
# pkgdown::init_site()
# pkgdown::build_articles_index()
pkgdown::build_articles()
# pkgdown::build_home_index()
# pkgdown::init_site()
# pkgdown::build_articles_index()
pkgdown::build_articles()
# pkgdown::build_home_index()
# pkgdown::init_site()
# pkgdown::build_articles_index()
pkgdown::build_articles()
# pkgdown::build_home_index()
# pkgdown::init_site()
# pkgdown::build_articles_index()
pkgdown::build_articles()
# pkgdown::build_home_index()
# pkgdown::init_site()
# pkgdown::build_articles_index()
pkgdown::build_articles()
fit$states$cov$posterior
?ctsmrTMN
?ctsmrTMB
fit$states$cov
fit$states$cov$prior$`t=0`
fit$states$cov$prior$`t=0.06`
fit$states$cov$prior$`t %>% length
fit$states$cov$prior$t %>% length
fit$states$cov$prior %>% length
length(fit$states$cov$prior)
length(fit$states$cov$posterior)
5+5
# pkgdown::build_home_index()
# pkgdown::init_site()
# pkgdown::build_articles_index()
pkgdown::build_articles()
# pkgdown::build_home_index()
# pkgdown::init_site()
# pkgdown::build_articles_index()
pkgdown::build_articles()
obj
obj$.__enclos_env__$private$alg.eqs
obj$.__enclos_env__$private$alg.eqs$theta
obj
obj$.__enclos_env__$private$alg.eqs
obj$.__enclos_env__$private$parameter.names
res
test="theta"
theta
"theta" %in% obj$.__enclos_env__$private$parameter.names
obj$.__enclos_env__$private$parameter.names %in% "theta"
obj$.__enclos_env__$private$parameters
obj$.__enclos_env__$private$parameters[c(T,F,F,F,F)]
obj$.__enclos_env__$private$parameters[c(T,F,F,F,F)]
obj$.__enclos_env__$private$parameters
obj$.__enclos_env__$private$tmb.initial.state.for.parameters
obj$.__enclos_env__$private$alg.eqs
private=obj$.__enclos_env__$private
parname="theta"
bool = !(private$parameter.names %in% parname)
bool
private$parameters
private$parameters[bool]
private$parameters[bool]
names(private$parameters[bool])
private$fixed.pars
parname
bool = !(private$fixed.pars %in% parname)
bool
private$fixed.pars[bool]
2+2
remotes::install_github(repo="phillipbvetter/ctsmrTMB", dependencies=TRUE)
